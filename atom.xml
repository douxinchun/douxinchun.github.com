<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[冷雨之家]]></title>
  <link href="http://douxinchun.github.io/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2018-05-01T17:22:56+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Commands 使用手记]]></title>
    <link href="http://douxinchun.github.io/blog/20180430/git-command-shi-yong-shou-ji.html"/>
    <updated>2018-04-30T17:44:10+08:00</updated>
    <id>http://douxinchun.github.io/blog/20180430/git-command-shi-yong-shou-ji</id>
    <content type="html"><![CDATA[<p>本文主要用来记录自己在使用Git的过程遇到的一些问题及解决方案.</p>

<h2>1.Git push error: dst refspec dev_1.0 matches more than one.</h2>

<h3>导火索</h3>

<p>  Git 删除远程库中的一个分支的时候报错,如下:</p>

<pre><code class="``">  git push origin --delete dev_1.0
  error: dst refspec dev_1.0 matches more than one.
  error: failed to push some refs to 'git@code.sohuno.com:ink-ios/SohuInk.git'
</code></pre>

<p>  出现这个错误的原因是在于远程Git服务器上名称为dev_1.0的有两个对象：一个是tag，一个是branch；在执行 git push origin &ndash;delete dev_1.0这个命令时Git服务器不知道要删除哪个。</p>

<h3>解决办法</h3>

<p>删除名称为dev_1.0的branch：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin :refs/heads/dev_1.0</span></code></pre></td></tr></table></div></figure>


<p>
删除名称为dev_1.0的tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin :refs/tags/dev_1.0</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install macOS by U Disk]]></title>
    <link href="http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk.html"/>
    <updated>2017-05-29T16:46:55+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk</id>
    <content type="html"><![CDATA[<p>动手之前,TimeMachine备份数据!<br/>
动手之前,TimeMachine备份数据!<br/>
动手之前,TimeMachine备份数据!</p>

<ul>
<li>1.8GB或者更大容量的U盘,Apple建议不小于12G</li>
<li>2.使用 应用程序&ndash;>实用工具&ndash;>磁盘工具 格盘 (参考图片 格盘)

<ul>
<li> 名称 Sierra 使用其它名称注意在后面的Terminal命令中作出替换</li>
<li> 格式 Mac OS 扩展 (日志式)</li>
<li> 方案 GUID 分区图</li>
</ul>
</li>
<li>3.AppStore中下载Sierra系统.下载耗时较长,可以冲杯咖啡,休息一下去了.(参照图片 原版安装包)</li>
<li>4.使用Terminal(应用程序→实用工具→终端),输入命令<br/>
<code>
sudo /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\ macOS\ Sierra.app --nointeraction
</code>
耐心等待,直至出现Done.启动U盘制作结束.</li>
<li>5.重新启动PC,按照Option不放,直到出现启动菜单选项.
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/mac_option_boot.jpg" alt="启动菜单项" /></li>
</ul>


<h3>附几张网络图片,仅供参考</h3>

<p>格盘<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/disk_ulitily.jpg" alt="U盘格盘" />
原版安装包<br/>
<img src="http://upload-images.jianshu.io/upload_images/3704217-1629bb87e7f7945e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原版安装包" />
步骤4,参考图
<img src="http://douxinchun.github.io/blog_reference_image/2017/7/terminal.jpg" alt="terminal-createinstallmedia" /></p>

<h3>参考资料</h3>

<p><a href="https://support.apple.com/zh-cn/HT201372">创建可引导的macOS安装器,https://support.apple.com/zh-cn/HT201372</a><br/>
<a href="http://www.iplaysoft.com/macos-usb-install-drive.html">iPlaySoft简单制作 macOS Sierra 正式版U盘USB启动安装盘方法教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacBook Pro (13-inch Mid 2012) 升级SSD和16G内存]]></title>
    <link href="http://douxinchun.github.io/blog/20170529/update-ssd-and-meomory-for-macbook-pro-13-inch-mid-2012.html"/>
    <updated>2017-05-29T11:52:22+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170529/update-ssd-and-meomory-for-macbook-pro-13-inch-mid-2012</id>
    <content type="html"><![CDATA[<h2>我的MacBook Pro</h2>

<p>电脑配置<br/>
机器型号: MacBook Pro (13-inch, Mid 2012) 普通屏<br/>
根据苹果官网的查询 <a href="https://support.apple.com/zh-cn/HT201300">苹果官网的MBP型号查询</a> 型号应该是MD101或者MD102<br/>
处理器: 2.5 GHz Intel Core i5<br/>
原配内存: 2G*2 1600Hz DDR3<br/>
原配硬盘: 500G 机械硬盘</p>

<p>虽然现在来看,这个配置可以卡出翔来,厚度堪当砖,但是回想一下,对于当时还是在装有Windows系统的Samsung本子上, 用GNUstep来Build&amp;Run Objective_C 的我来说, 这简直就是女神一般的存在.</p>

<p>在升级到macOS Sierra后,我已经再也无法忍受启动Xcode时候的无限风火轮.原来打算购买新的MacBook Pro,去官网看了一下,新的本子为了追求超薄,内存什么的都采用了焊接的工艺,换句话说,要买就得直接上顶配,不然以后没法升级.大体预算了一下,需要软妹币小两万.摸了摸自己的口袋,想了想老丈人的礼金,含着泪默默地关闭了apple.com.打开了京东.</p>

<h2>升级方案</h2>

<p>SSD的升级方案,按照网上的介绍有三种:</p>

<ul>
<li>1.主硬盘位保持原装机械硬盘不动,光驱位替换为SSD</li>
<li>2.主硬盘位换为SSD,光驱位换为拆下来的机械硬盘</li>
<li>3.主硬盘位换为SSD,光驱位不动.</li>
</ul>


<p>在此,我的建议是,如果是Fusion类型的话(机械硬盘和SSD混用,方案1或者方案2),首先查看一下光驱位和主硬盘位的SATA串口的类型.<br/>
如果只有一个是SATA3,那么SSD放在SATA3串口的位置.<br/>
如果都是SATA3,那么主硬盘位放机械硬盘,光驱位放SSD,因为主硬盘会有SMS保护(SMS是什么后面会有介绍).但具体的要根据自己的实际情况,比如说因为光驱位的供电模式等原因造成的SSD不识别,那只能把SSD放在主硬盘位.<br/>
对我来说,我采用的是方案3,主要原因有下:<br/>
1.主硬盘位对于硬盘的保护比较好,垂直位置上和键盘不重叠,而光驱位位于键盘的正下方,相对来说不如主硬盘位稳定.<br/>
2.哥是一个纯粹的人,要什么Fusion啊,要存储的话直接上外置硬盘就好了.</p>

<h3>查看主硬盘位和光驱位SATA类型的方法</h3>

<p>关于本机&ndash;>概览&ndash;>系统报告&ndash;>SATA/SATA Express. 如图,看<strong>链接速度</strong>,SATA3为6千兆位. SATA2为3千兆位. 我的CD-ROM的<strong>协商的链接速度</strong>:1.5 千兆位. 原装硬盘的<strong>协商的链接速度</strong>为3千兆位,说明原装的机械硬盘上的串口速度最高到SATA2.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/disk_sata.jpg" alt="SATA_disk" /><br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/cd-rom_sata.jpg" alt="SATA_cd-rom" /></p>

<h2>购买的SSD和内存</h2>

<p>购买时间正巧赶上了京东618店庆搞活动.<br/>
SSD我买的是 SAMSUNG 850 EVO 250G SATA3<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/jd_ssd.jpg" alt="JD Samsumg SSD" /><br/>
内存我买的是金士顿的8G内存条.买两条.按照Apple官网的<a href="https://support.apple.com/zh-cn/HT201165">内存升级指南</a>2012Mid的MBP最高可以升级到4G*2,可能是当年的单条8G还不是很流行,我实测直接升级到8G*2没有任何问题.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/jd_memory.jpg" alt="JD Kingston Memory" /><br/>
另外还购买了SSK的2.5英寸的USB 3.0硬盘盒,用于装替换下来的原装硬盘.</p>

<hr />

<h2>替换SSD</h2>

<p>先来一张拆机前的准备图:<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4026.jpg" alt="ready" /><br/>
做好Time Machine后,开始更换SSD,先拆开后盖,注意拆机前先洗手,祷告,触摸金属,释放自身静电,祈求上帝保佑:<br/>
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macbookpro/13_bottom_case_removal.png" alt="The location of screws" /><br/>
拆下来的螺丝,按照相对位置放好,便于以后重新安装上去. 后壳周边没有任何的暗扣,用塑料吸盘轻轻一吸就能起来.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4027.jpg" alt="螺丝排列" /><br/>
我曾经拆过三星,宏碁还有联想的笔记本(为了清灰,说多了都是泪),但是不得不说MBP内部光驱,硬盘,主板,风扇,电池的排列和构造简直是太完美了, 没有一处的细节不完美,没有一处的空间被浪费掉,且容我慢慢欣赏20s.<br/>
断开内存条右边的电池电源线,撬开光驱右边最下面的硬盘数据线.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4028.jpg" alt="拆开后盖总览" /><br/>
拆下硬盘上方的小的固定条,一共两个螺丝.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4032.jpg" alt="硬盘固定条" /><br/>
利用翘起的塑料小片, 轻轻拉出硬盘(注意藏在硬盘下面的排线,不要扯断了).<br/>
轻轻拔出左侧的SATA3接口,整个机械硬盘就完全拆下来了.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4033.jpg" alt="被拉出来的硬盘" /><br/>
按照上图的1,2,3,4的位置,把这四个螺丝拆下来,同样的位置安装到SSD上.<br/>
将SSD轻轻的装回原硬盘的位置,如下图所示,安装好以后,SSD会比原有的机械硬盘略薄一些,不过有螺丝的固定,没有影响. <br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4035.jpg" alt="换为SSD以后效果图" /></p>

<hr />

<h2>替换内存</h2>

<p>内存条的替换没有什么可说的,具体的可以参加Apple的指南.<a href="https://support.apple.com/zh-cn/HT201165">Apple MBP 安装和拆卸内存指南</a><br/>
这里放一张基本流程的图:<br/>
<img src="https://support.apple.com/library/content/dam/edam/applecare/images/zh_CN/macbookpro/13_insert_memory.png" alt="替换内存条基本流程,引用自Apple" /><br/>
需要注意的一点是,一共上下两根条子,由于这两根条子挨得过于靠近,安装下面的条子的时候,不要把上面的条子的两边的压脚给弄坏了,金手指对齐插好以后,两边轻轻一按就能就位,要用巧劲,不要用蛮力.
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4030.jpg" alt="替换内存" /></p>

<hr />

<h2>数据恢复</h2>

<p>插入启动U盘,开机启动,先利用磁盘工具将SSD抹掉格式化为:OS X 扩展 (日志式),GUID 分区图.然后插入Time Machine的外置硬盘,选择将Time Machine备份的最新内容恢复到刚刚格式化的SSD分区中.<br/>
小技巧:合上后盖后,先不要着急上螺丝,先插U盘,点亮机器,识别出来SSD,确认机器不报警以后,再断电上螺丝.<br/>
制作启动U盘,参见另一篇blog 传送门<a href="http://douxinchun.github.io/blog/20170529/install-macos-by-u-disk.html">U盘安装macOS系统</a></p>

<hr />

<h2>后续配置</h2>

<h3>开启Trim</h3>

<p>TRIM 是系统级的命令，可以允许操作系统与固态硬盘通信，判断 SSD 上哪些区域没有使用，并准备好擦除和复写。如果缺少 TRIM 支持，系统会在 SSD 可用容量减少时遇到写入速度变慢的现象.<br/>
可以在「关于本机」里查看系统有没有开启 TRIM 支持：<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/disk_sata.jpg" alt="SATA_disk" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo trimforce enable</span></code></pre></td></tr></table></div></figure>


<p>
命令执行后会出现警告语，根据提示输入两次「Y」以后，如图显示，就说明 TRIM 支持开启成功了（命令执行完成后会自动重启) :<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/trim_start.jpg" alt="Trim_Start" /></p>

<p>注意,旧版本的OS X系统可能需要先禁用rootless</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nvram boot-args=rootless=0</span></code></pre></td></tr></table></div></figure>


<p>
据说 OS X El Capitan以后不需要,我当前用的Sierra不需要这个.</p>

<h3>关闭突发移动感应器(Sudden Motion Sensor, SMS)</h3>

<p>突发移动感应器 (SMS) 技术是针对硬盘设计的内建保护功能，有助于防止电脑在掉落或遭遇异常强烈的振动时出现磁盘问题。目前普遍的观点是MBP的SMS功能在主硬盘位上有,光驱位上没有,由于SMS对SSD没有任何的保护作用,为了防止SMS对主硬盘位上SSD造成数据损坏,建议关闭.<br/>
SMS的详细介绍可以在Apple的官方文档上查看 <a href="https://support.apple.com/zh-cn/HT201666">Mac 笔记本电脑：关于突发移动感应器</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pmset -g  //查看看sms的状态,1为开启,0位关闭  
</span><span class='line'>sudo pmset sms -a 0 //关闭sms  
</span><span class='line'>sudo pmset -g  //重新查看sms的状态是否为0.  </span></code></pre></td></tr></table></div></figure>


<p>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/shutdown_pmset.jpg" alt="SMS_shutdown" /></p>

<p>关于是否需要关闭SMS的讨论,可以参见这里,<a href="http://bbs.feng.com/read-htm-tid-4285975.html">http://bbs.feng.com/read-htm-tid-4285975.html</a></p>

<h3>关闭Time Machine的本地快照</h3>

<p>本地快照的详情,同样参见<a href="https://support.apple.com/kb/PH25723?viewlocale=zh_CN&amp;locale=zh_CN">Apple Time Machine 官方介绍</a><br/>
这个功能会增加SSD的写入量,降低SSD的寿命.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tmutil disablelocal //禁用本地快照
</span><span class='line'>sudo tmutil enablelocal  //启用本地快照</span></code></pre></td></tr></table></div></figure>


<p>
在Time Machine的偏好设置中可以查看,本地快照的状态,出现了红色的部分即为启用,不出现即为禁用.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/timemachine_local.jpg" alt="timemachine_local_shutdown" /></p>

<h2>最终成果</h2>

<p>开机10s以内,Xcode工程秒开,硬盘读写速度爽的飞起.<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2017/5/IMG_4036.jpg" alt="SSD_Speed" /></p>

<h2>参考链接</h2>

<p><a href="http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state/">http://www.superqq.com/blog/2015/08/27/macbook-replace-ssd-solid-state/</a><br/>
<a href="http://chaishiwei.com/blog/972.html">http://chaishiwei.com/blog/972.html</a><br/>
<a href="https://www.zhihu.com/question/21100176">https://www.zhihu.com/question/21100176</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 操作系统目录说明]]></title>
    <link href="http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming.html"/>
    <updated>2017-01-03T11:28:24+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming</id>
    <content type="html"><![CDATA[<p>iOS的设备越狱后,安装openssh,可以通过ssh连接工具(Mac OS 下直接使用Terminal)连接到手机上查看相关的系统目录:
ssh 连接命令常用格式:
`ssh [-l login_name] [-p port] [user@]hostname<br/>
示例:<br/>
$ ssh <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#114;&#111;&#x6f;&#x74;&#64;&#49;&#48;&#46;&#x32;&#x2e;&#57;&#x38;&#x2e;&#56;&#x37;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#x30;&#46;&#50;&#46;&#57;&#56;&#x2e;&#56;&#x37;</a><br/>
默认的openssh连接密码为:alpine</p>

<p>一、iPhone的图片是放在：/private /var/ mobile/Media /DCIM当中的。</p>

<!--more-->


<p>二、iPhone中其他基本文件的存放文件目录如下：<br/>
1、/Applications<br/>
常用软件的安装目录<br/>
2. /private /var/ mobile/Media /iphone video Recorder
iphone video Recorder录像文件存放目录</p>

<table>
<thead>
<tr>
<th>name     </th>
<th style="text-align:right;"> path</th>
</tr>
</thead>
<tbody>
<tr>
<td>iphone video Recorderdfsajdfks</td>
<td style="text-align:right;">的飞机考六级来看看带分了</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th>First Header </th>
<th> Second Header </th>
<th> Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<p> 录像文件存放目录 | /private /var/ mobile/Media /iphone video Recorder
3、/private /var/ mobile/Media /DCIM <br/>
相机拍摄的照片文件存放目录<br/>
4、/private/var/ mobile /Media/iTunes_Control/Music <br/>
iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。<br/>
5、/private /var/root/Media/EBooks<br/>
熊猫看书存放目录 <br/>
6、/Library/Ringtones<br/>
系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可） <br/>
7、/System/Library/Audio/UISounds<br/>
短信记其它系统默认效果铃声（m4r铃声文件改扩展名为.caf）短信铃声文件名为sms-received开头的caf文件<br/>
8、/private/var/ mobile /Library/AddressBook<br/>
系统电话本的存放目录。<br/>
9、/private /var/ mobile/Media /iphone Recorder<br/>
iphone Recorder录音软件文件存放目录<br/>
10、/Applications/Preferences.app/zh_CN.lproj<br/>
软件Preferences.app的中文汉化文件存放目录<br/>
11、/Library/Wallpaper <br/>
系统q1ang纸的存放目录<br/>
12、/System/Library/Audio/UISounds <br/>
系统声音文件的存放目录<br/>
13、/private/var/root/Media/PXL <br/>
ibrickr上传安装程序建立的一个数据库，估计和windows的uninstall记录差不多。<br/>
14、/bin <br/>
和linux系统差不多，是系统执行指令的存放目录。 <br/>
15、/private/var/ mobile /Library/SMS <br/>
系统短信的存放目录<br/>
16、/private/var/run<br/>
系统进程运行的临时目录？（查看这里可以看到系统启动的所有进程）<br/>
17、/private/var/logs/CrashReporter<br/>
系统错误记录报</p>

<h3>iPhone 特殊文件目录介绍</h3>

<ol>
<li>/private/var/mobile<br/>
新刷完的机器，要在这个文件夹下建一个Documents的目录。</li>
<li>/private/var/mobile/Applications<br/>
通过AppStore和iTunes安装的程序都在里面。</li>
<li>/private/var/stash<br/>
这个文件夹下的Applications目录里面是所有通过Cydia和app安装的程序，Ringtones目录里是所有的手机铃音，自制铃音直接拷在里面即可，Themes目录里是所有Winterboard主题，可以手工修改。</li>
<li>/var/mobile/Media/ROMs/GBA　<br/>
gpsPhone模拟器存放rom的目录。</li>
<li>/var/mobile/Media/textReader<br/>
textReader看书软件读取的电子书的存放路径。</li>
<li>/System/Library/Fonts/Cache<br/>
系统字体目录，要替换的字体放在该目录下，权限644不变</li>
<li>/private/var/mobile/Media/Maps<br/>
离线地图目录，把地图文件夹放到该目录下，文件夹赋予777权限</li>
<li>/private/var/mobile/Library/Downloads<br/>
ipa文件存放目录，用Installous安装</li>
<li>/private/var/mobile/Library/Keyboard<br/>
系统拼音字库文件位置</li>
<li>/var/stash/Themes.XXXXXX<br/>
winterboard主题文件存放路径</li>
<li>/private/var/mobile/Media/DCIM/999APPLE<br/>
系统自带截屏文件存放路径</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block 声明语法 简记]]></title>
    <link href="http://douxinchun.github.io/blog/20161110/block-sheng-ming-yu-fa-jian-ji.html"/>
    <updated>2016-11-10T10:55:09+08:00</updated>
    <id>http://douxinchun.github.io/blog/20161110/block-sheng-ming-yu-fa-jian-ji</id>
    <content type="html"><![CDATA[<h4>本地变量(Local Variable)</h4>

<blockquote><p>returnType (^blockName)(parameterTypes) = ^returnType(parameters) {&hellip;};</p></blockquote>

<h4>属性(Property)</h4>

<blockquote><p>@property (nonatomic, copy, nullability) returnType (^blockName)(parameterTypes);</p></blockquote>

<h4>方法参数(method parameter)</h4>

<blockquote><ul>
<li>(void)someMethodThatTakesABlock:(returnType (^nullability)(parameterTypes))blockName;</li>
</ul>
</blockquote>

<h4>方法调用的时候的参数</h4>

<blockquote><p>[someObject someMethodThatTakesABlock:^returnType (parameters) {&hellip;}];</p></blockquote>

<h4>重定义(typedef)</h4>

<blockquote><p>typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {&hellip;};</p></blockquote>

<h2>参考资料</h2>

<p><a href="http://fuckingblocksyntax.com/">http://fuckingblocksyntax.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple远程推送Pem证书生成-命令备忘]]></title>
    <link href="http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate.html"/>
    <updated>2016-08-26T11:12:01+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate</id>
    <content type="html"><![CDATA[<h3>Develoepr Environment</h3>

<ol>
<li>去Apple Develop 网站申请Push证书并下载导入到Keychain中.</li>
<li>从Keychain中分别导出证书和密钥的.p12文件:cer.p12 key.p12<br/>
交换密码为:123456</li>
<li><p>使用openssl 将cer.p12及key.p12转成cer.pem和key.pem<br/>
命令如下:</p>

<pre><code>$ openssl pkcs12 -clcerts -nokeys -out cer.pem -in cer.p12
$ openssl pkcs12 -nocerts -out key.pem -in key.p12
</code></pre>

<p>转换密钥文件时候,提示输一个pem的密码,转换完成后清除pem密码的命令:</p>

<pre><code>$ openssl rsa -in key.pem -out key.pem  
</code></pre></li>
<li><p>合并cer.pem及key.pem</p>

<pre><code>$ cat cer.pem key.pem &gt; cer_key.pem
</code></pre></li>
</ol>


<h3>Release Environment 过程同上</h3>

<p>PS.<br/>
测试生成的cer.pem及key.pem是否可用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ openssl s_client -connect gateway.push.apple.com:2195  -cert cer.pem -key key.pem </span></code></pre></td></tr></table></div></figure>


<p>
注：gateway.push.apple.com:2195用于appStore app;<br/>
   gateway.sandbox.push.apple.com:2195用于沙盒app;<br/>
   以上命令执行后会打印一大罗信息，最后处于可输入状态，打几个字符回车后自动断开连接即为正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="http://douxinchun.github.io/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define NSLog(...) DDLogInfo(__VA_ARGS__)</span></code></pre></td></tr></table></div></figure>


<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>NSDateFormatter *threadUnsafeDateFormatter;
</span><span class='line'>threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
</span><span class='line'>        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
</span><span class='line'>...  
</span><span class='line'>    
</span><span class='line'>-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{
</span><span class='line'>    
</span><span class='line'>    NSString *levelStr = nil;
</span><span class='line'>    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];
</span><span class='line'>    
</span><span class='line'>    switch (logMessage.flag) {
</span><span class='line'>        case DDLogFlagError:
</span><span class='line'>        {
</span><span class='line'>            levelStr=@"[ERROR]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagWarning:{
</span><span class='line'>            levelStr=@"[WARN ]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagDebug:{
</span><span class='line'>            levelStr=@"[DEBUG]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        case DDLogFlagInfo:
</span><span class='line'>        {
</span><span class='line'>            levelStr=@"[INFO ]";
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        default:
</span><span class='line'>            levelStr=@"[VBOSE]";
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
</span><span class='line'>    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
</span><span class='line'>    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个
</span><span class='line'>    
</span><span class='line'>    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
</span><span class='line'>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</span><span class='line'>
</span><span class='line'>    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
</span><span class='line'>    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
</span><span class='line'>    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
</span><span class='line'>    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
</span><span class='line'>    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];
</span><span class='line'>    
</span><span class='line'>    DDLogError(@"DDLogError 中文错误");      // red
</span><span class='line'>    DDLogWarn(@"DDLogWarn 中文警告");        // orange
</span><span class='line'>    DDLogDebug(@"DDLogDebug 中文调试");      // blue
</span><span class='line'>    DDLogInfo(@"DDLogInfo 中文信息");        // purple
</span><span class='line'>    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="http://douxinchun.github.io/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="http://douxinchun.github.io/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];</span></code></pre></td></tr></table></div></figure>


<h3>2.4为特定的Log级别设定颜色</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];</span></code></pre></td></tr></table></div></figure>


<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress侧边栏增加访客地图]]></title>
    <link href="http://douxinchun.github.io/blog/20151013/vistormap.html"/>
    <updated>2015-10-13T13:33:13+08:00</updated>
    <id>http://douxinchun.github.io/blog/20151013/vistormap</id>
    <content type="html"><![CDATA[<p>效果图我的Blog右下角那个旋转的3D地图,可以显示地域和访客的数量.<br/>
Widget获取地址在这里:<br/>
<a href="https://www.revolvermaps.com/?target=setupgl">https://www.revolvermaps.com/?target=setupgl</a><br/>
可以根据自己的喜好设定.
分两步添加到Octopress的侧边栏中:<br/>
1,获取code,并创建文件<br/>
<code>source/_includes/custom/asides/earth.html</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>访客地图<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;//ra.revolvermaps.com/0/0/6.js?i=0qld21p02br&amp;amp;m=0&amp;amp;s=220&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=0&quot;</span> <span class="na">async=</span><span class="s">&quot;async&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
2,修改配置文件<br/>
<code>_config.yml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">custom/asides/about.html</span><span class="p-Indicator">,</span><span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">asides/github.html</span><span class="p-Indicator">,</span> <span class="nv">asides/delicious.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">,</span> <span class="nv">asides/googleplus.html</span><span class="p-Indicator">,</span><span class="nv">asides/category_list.html</span><span class="p-Indicator">,</span><span class="nv">custom/asides/recent_comments.html</span><span class="p-Indicator">,</span><span class="nv">custom/asides/earth.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS SDK中的私有API]]></title>
    <link href="http://douxinchun.github.io/blog/20151009/private-api-in-ios.html"/>
    <updated>2015-10-09T14:37:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20151009/private-api-in-ios</id>
    <content type="html"><![CDATA[<p>由于是私有API,再键入的时候不会有提示,注意在提交AppStore之前需要全部删除.</p>

<p>1.查看View的层次结构</p>

<blockquote><p>recursiveDescription</p></blockquote>

<p>eg:查看UISearchBar的View层级,找到Cancel-Button的位置并修改该按钮的样式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UISearchBar</span> <span class="o">*</span><span class="n">searchBarView</span>  <span class="o">=</span> <span class="p">[[</span><span class="bp">UISearchBar</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">375</span><span class="p">,</span> <span class="mi">44</span><span class="p">)];</span>
</span><span class='line'><span class="n">searchBarView</span><span class="p">.</span><span class="n">showsCancelButton</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="c1">//私有API,直接发消息给searchBarView的吧,编译器是不会过的,不信你试试看~~</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,[</span><span class="n">searchBarView</span> <span class="nl">performSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">recursiveDescription</span><span class="p">)]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
打印结果如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2015</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">09</span> <span class="mi">15</span><span class="o">:</span><span class="mi">12</span><span class="o">:</span><span class="mf">20.568</span> <span class="n">findAward</span><span class="p">[</span><span class="mi">5625</span><span class="o">:</span><span class="mi">756750</span><span class="p">]</span> <span class="o">&lt;</span><span class="nl">UISearchBar</span><span class="p">:</span> <span class="mh">0x144574710</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">375</span> <span class="mi">44</span><span class="p">);</span> <span class="n">text</span> <span class="o">=</span> <span class="err">&#39;&#39;</span><span class="p">;</span> <span class="n">gestureRecognizers</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">NSArray</span><span class="p">:</span> <span class="mh">0x174247b90</span><span class="o">&gt;</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x174430040</span><span class="o">&gt;&gt;</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">&lt;</span><span class="nl">UIView</span><span class="p">:</span> <span class="mh">0x17418d750</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">375</span> <span class="mi">44</span><span class="p">);</span> <span class="n">clipsToBounds</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span> <span class="n">autoresize</span> <span class="o">=</span> <span class="n">W</span><span class="o">+</span><span class="n">H</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x17442ff80</span><span class="o">&gt;&gt;</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="nl">UISearchBarBackground</span><span class="p">:</span> <span class="mh">0x1445a4240</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">375</span> <span class="mi">44</span><span class="p">);</span> <span class="n">opaque</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x174431200</span><span class="o">&gt;&gt;</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="nl">UINavigationButton</span><span class="p">:</span> <span class="mh">0x14452b250</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">34</span> <span class="mi">30</span><span class="p">);</span> <span class="n">opaque</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x17442e4c0</span><span class="o">&gt;&gt;</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="nl">UISearchBarTextField</span><span class="p">:</span> <span class="mh">0x144645db0</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">);</span> <span class="n">text</span> <span class="o">=</span> <span class="err">&#39;&#39;</span><span class="p">;</span> <span class="n">clipsToBounds</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span> <span class="n">opaque</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x1702213a0</span><span class="o">&gt;&gt;</span>
</span><span class='line'>   <span class="o">|</span>    <span class="o">|</span>    <span class="o">|</span> <span class="o">&lt;</span><span class="nl">_UISearchBarSearchFieldBackgroundView</span><span class="p">:</span> <span class="mh">0x1445732c0</span><span class="p">;</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span> <span class="mi">0</span><span class="p">;</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">);</span> <span class="n">opaque</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">autoresize</span> <span class="o">=</span> <span class="n">W</span><span class="o">+</span><span class="n">H</span><span class="p">;</span> <span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span> <span class="n">layer</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">CALayer</span><span class="p">:</span> <span class="mh">0x17442fac0</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>根据打印的结果,我们可以看出,UISearchBar的二级subview里有一个,<code>UINavigationButton</code>随便猜猜,这个也是<code>UIButton</code>的子类了.故要获得它并修改他的样式的code如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="k">in</span> <span class="p">[[</span><span class="n">searchBarView</span><span class="p">.</span><span class="n">subviews</span> <span class="n">lastObject</span><span class="p">]</span> <span class="n">subviews</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="n">view</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">UIButton</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="bp">UIButton</span> <span class="o">*</span><span class="n">cancelBtn</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIButton</span> <span class="o">*</span><span class="p">)</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">cancelBtn</span> <span class="nl">setTitle</span><span class="p">:</span><span class="s">@&quot;取消&quot;</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">cancelBtn</span> <span class="nl">setTitleColor</span><span class="p">:</span><span class="n">COLOR_EA4426</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateNormal</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">cancelBtn</span> <span class="nl">setTitleColor</span><span class="p">:</span><span class="n">COLOR_EA4426</span> <span class="nl">forState</span><span class="p">:</span><span class="n">UIControlStateHighlighted</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 统计项目中代码的行数]]></title>
    <link href="http://douxinchun.github.io/blog/20150901/cloc.html"/>
    <updated>2015-09-01T10:09:12+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150901/cloc</id>
    <content type="html"><![CDATA[<h3>方法一:</h3>

<p>终端命令进入项目目录下，命令如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l  </span></code></pre></td></tr></table></div></figure>


<p>
列出每个文件的行数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs grep -v "^$"|wc -l  </span></code></pre></td></tr></table></div></figure>


<p>列出代码行数总和</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep -v "^$"是去掉空行</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注释也统计在代码量之内</p>

<h3>方法二:</h3>

<p>使用CLOC,项目说明地址:<a href="http://cloc.sourceforge.net/">http://cloc.sourceforge.net/</a><br/>
  1.64 Perl脚本下载地址,<a href="https://github.com/douxinchun/CLOC">https://github.com/douxinchun/CLOC</a></p>

<p>使用方法:<br/>
perl cloc-1.64.pl ./YourProjectName</p>

<p>result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 200 files
</span><span class='line'> 744 text files.
</span><span class='line'> 630 unique files.                                          
</span><span class='line'> 315 files ignored.
</span><span class='line'>
</span><span class='line'>http://cloc.sourceforge.net v 1.64  T=2.56 s (199.8 files/s, 22014.2 lines/s)
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Language                     files          blank        comment           code
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>Objective C                    242           6916           4208          28460
</span><span class='line'>C/C++ Header                   265           3605           8066           4870
</span><span class='line'>JSON                             3              0              0            107
</span><span class='line'>Bourne Shell                     1              5              0             65
</span><span class='line'>-------------------------------------------------------------------------------
</span><span class='line'>SUM:                           511          10526          12274          33502
</span><span class='line'>-------------------------------------------------------------------------------</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在网页中嵌入css的三种方法]]></title>
    <link href="http://douxinchun.github.io/blog/20150722/zai-wang-ye-zhong-qian-ru-cssde-san-chong-fang-fa.html"/>
    <updated>2015-07-22T18:42:32+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150722/zai-wang-ye-zhong-qian-ru-cssde-san-chong-fang-fa</id>
    <content type="html"><![CDATA[<p>留存备忘<br/>
假如有一段HTML代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html>
</span><span class='line'>&lt;head>
</span><span class='line'>&lt;title>Hi&lt;/title>
</span><span class='line'>&lt;/head>
</span><span class='line'>&lt;body>
</span><span class='line'>  &lt;div id="myid" class="myclass">&lt;/div>
</span><span class='line'>&lt;/body>
</span><span class='line'>&lt;/html></span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在HTML代码中嵌入CSS有一下三种方法：</p>

<p>1.外链式CSS。编写一个.css文件并且命名为style.css,内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#myid{
</span><span class='line'>     padding:5px;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>
然后在HTML代码的&lt;head>标签对,&lt;title>下面改成这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head>
</span><span class='line'>   &lt;title>HI&lt;/title>
</span><span class='line'>   &lt;link rel="stylesheet" type="text/css" href="style.css">
</span><span class='line'>   &lt;/head></span></code></pre></td></tr></table></div></figure>


<p>
这样就OK了</p>

<p>2.内嵌式CSS。直接在&lt;title>标签加成这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head>
</span><span class='line'>   &lt;title>HI&lt;/title>
</span><span class='line'>   &lt;style type="text/css">
</span><span class='line'>   &lt;!--
</span><span class='line'>    #myid{
</span><span class='line'>     padding:5px;
</span><span class='line'>     }
</span><span class='line'>    -->
</span><span class='line'>   &lt;/style>
</span><span class='line'>   &lt;/head></span></code></pre></td></tr></table></div></figure>


<p></p>

<p>3.直接式CSS。直接为DIV添加style属性如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="myid" class="myclass" style="padding:5px;">&lt;/div></span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用itms-services 协议来发布ipa文件]]></title>
    <link href="http://douxinchun.github.io/blog/20150722/distribute-ipa-by-itms-services.html"/>
    <updated>2015-07-22T16:45:35+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150722/distribute-ipa-by-itms-services</id>
    <content type="html"><![CDATA[<p>苹果允许用itms-services协议来直接在iphone/ipad上安装应用程序，我们可以直接生成该协议需要的相关文件，这样产品经理和测试都可以直接在设备上安装新版的应用:</p>

<p>需要两个文件，一个是html，另一个是plist。</p>

<p>文件index.html(请自动忽略css部分,我实在不会写前端):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html>
</span><span class='line'>&lt;head>
</span><span class='line'>    &lt;style>
</span><span class='line'>        body {
</span><span class='line'>            font-size: 50px;
</span><span class='line'>            margin-top:100px;
</span><span class='line'>            margin-left:auto;
</span><span class='line'>            margin-right:auto;
</span><span class='line'>            text-align:center;
</span><span class='line'>        }
</span><span class='line'>    &lt;/style>
</span><span class='line'>&lt;/head>
</span><span class='line'>&lt;body>
</span><span class='line'>&lt;p>iOS 7.1 and above systems use the following link to install&lt;/p>
</span><span class='line'>&lt;p>&lt;a href="itms-services://?action=download-manifest&amp;url=https://********/**/tue_test.plist">Install TU/e App For Test&lt;/a>&lt;/p>
</span><span class='line'>&lt;/a>&lt;/p>
</span><span class='line'>&lt;/body>
</span><span class='line'>&lt;/html></span></code></pre></td></tr></table></div></figure>


<p></p>

<p>文件plist:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?>
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
</span><span class='line'>&lt;plist version="1.0">
</span><span class='line'>&lt;dict>
</span><span class='line'>   &lt;key>items&lt;/key>
</span><span class='line'>   &lt;array>
</span><span class='line'>       &lt;dict>
</span><span class='line'>           &lt;key>assets&lt;/key>
</span><span class='line'>           &lt;array>
</span><span class='line'>               &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>software-package&lt;/string>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>http://****/**/tue_test.ipa(ipa文件的访问地址)&lt;/string>
</span><span class='line'>               &lt;/dict>
</span><span class='line'>               &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>display-image&lt;/string>
</span><span class='line'>                   &lt;key>needs-shine&lt;/key>
</span><span class='line'>                   &lt;true/>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>图片的地址&lt;/string>
</span><span class='line'>               &lt;/dict>
</span><span class='line'>      &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>full-size-image&lt;/string>
</span><span class='line'>                   &lt;key>needs-shine&lt;/key>
</span><span class='line'>                   &lt;true/>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>图片的地址&lt;/string>
</span><span class='line'>              &lt;/dict>
</span><span class='line'>           &lt;/array>
</span><span class='line'>           &lt;key>metadata&lt;/key>
</span><span class='line'>           &lt;dict>
</span><span class='line'>               &lt;key>bundle-identifier&lt;/key>
</span><span class='line'>               &lt;string>com.xx.xx(bundleID需要ipa中需要保持一致)&lt;/string>
</span><span class='line'>               &lt;key>bundle-version&lt;/key>
</span><span class='line'>               &lt;string>1.0(CFBundleVersion需要和ipa中的保持一致)&lt;/string>
</span><span class='line'>               &lt;key>kind&lt;/key>
</span><span class='line'>               &lt;string>software&lt;/string>
</span><span class='line'>               &lt;key>subtitle&lt;/key>
</span><span class='line'>               &lt;string>&lt;/string>
</span><span class='line'>               &lt;key>title&lt;/key>
</span><span class='line'>               &lt;string>TU/e测试版(随便起,用于踊跃alert确认时的提示)&lt;/string>
</span><span class='line'>           &lt;/dict>
</span><span class='line'>       &lt;/dict>
</span><span class='line'>   &lt;/array>
</span><span class='line'>&lt;/dict>
</span><span class='line'>&lt;/plist></span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>注意</h3>

<p>在iOS7.1之前,协议地址后的url需要使用http协议,</p>

<blockquote><p>itms-services://?action=download-manifest&amp;url=<a href="http://********/**/tue_test.plist">http://********/**/tue_test.plist</a></p></blockquote>

<p>在iOS7.1以及以后,这里需要换成https协议,</p>

<blockquote><p>itms-services://?action=download-manifest&amp;url=<a href="https://********/**/tue_test.plist">https://********/**/tue_test.plist</a></p></blockquote>

<p>否则使用Safari安装的时候,会提示&#8221;无法安装应用程序，因为“xx.xx.xx” 的证书无效;无法找到主机&#8221;1.2.3.4&#8221;&ldquo;之类的错误.也就是说,原先存放plist的web服务器需要支持https协议.<br/>
自己动手搭建一个https的web服务的话,其中证书的部分很令人头痛的.我在IIS上整了一个上午,最后的结果上自己生成的证书Safari不认.我去,果断放弃这条路,google了一个简便的方法.利用开源中国(<a href="http://git.oschina.net/">http://git.oschina.net/</a>)提供的代码托管服务,托管一下plist文件,然后ipa的安装包和index.html依旧放在自己的服务器上.itms-services协议后面的url地址,改成在plist文件在开源中国上的url(注意url结束到.plist为止,后面的那一串参数不要带,直接手动把http改为https).</p>

<p>具体的流程参见这里,<a href="http://blog.csdn.net/sy_bz/article/details/33739779">http://blog.csdn.net/sy_bz/article/details/33739779</a></p>

<p>同理,我觉得github也应该可以代替开源中国.</p>

<h3>附</h3>

<p>plist中的字段说明:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> key值                </th>
<th style="text-align:left;"> 说明                   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>assets</strong>           </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;"> software-package url </td>
<td style="text-align:left;"> 要安装的 ipa 地址  </td>
</tr>
<tr>
<td style="text-align:left;"> display-image url    </td>
<td style="text-align:left;">   安装ipa的时候,桌面显示呃图标  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>metadata</strong>         </td>
<td style="text-align:left;">    </td>
</tr>
<tr>
<td style="text-align:left;"> bundle-identifier    </td>
<td style="text-align:left;"> bundle ID (和ipa保持一致) </td>
</tr>
<tr>
<td style="text-align:left;"> bundle-version       </td>
<td style="text-align:left;"> CFBundleVersion(和ipa保持一致)  </td>
</tr>
<tr>
<td style="text-align:left;"> title                </td>
<td style="text-align:left;"> 用户点击时弹框中的AppTitle提示  </td>
</tr>
<tr>
<td style="text-align:left;"> subtitle             </td>
<td style="text-align:left;"> 不明,应该 也跟弹框的内容相关 </td>
</tr>
</tbody>
</table>


<p>以备后用<br/>
自搭https服务器,可以查看的参照:<a href="http://zengrong.net/post/2108.html">http://zengrong.net/post/2108.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode中的调试器LLDB]]></title>
    <link href="http://douxinchun.github.io/blog/20150720/xcodezhong-de-diao-shi-qi-lldb.html"/>
    <updated>2015-07-20T17:40:46+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150720/xcodezhong-de-diao-shi-qi-lldb</id>
    <content type="html"><![CDATA[<p>原文地址:<a href="http://objccn.io/issue-19-2/">http://objccn.io/issue-19-2/</a><br/>
里面内容很多,本着实用主义,这里只记录我自己常用的命令:</p>

<h3>1.查看某个变量的值</h3>

<p> <em>print</em><br/>
 <img src="http://img.objccn.io/issue-19/Image_2014-11-20_at_10.09.38_PM.png"><br/>
 LLDB会做前缀匹配,一把简写为p,<br/>
 使用po可以查看NSObject的description</p>

<h3>2.改变某个变量的值</h3>

<p><em>expression</em><br/>
<img src="http://img.objccn.io/issue-19/Image_2014-11-20_at_10.15.01_PM.png"><br/>
简写为expr或者是e(还能再懒一点吗~~)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayout 使用总结]]></title>
    <link href="http://douxinchun.github.io/blog/20150720/autolayout-summary.html"/>
    <updated>2015-07-20T16:55:20+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150720/autolayout-summary</id>
    <content type="html"><![CDATA[<h3>1.如何计算UITableViewCell的高度</h3>

<p>在IOS的布局中，计算和适应cell的高度是个经典的问题, 在frame时代(springs和struts方式布局时代)，我们都知道用<code>sizeWithFont:</code> 先计算出文字的高度，然后通过计算得出cell的高度，然后赋予<code>heightForRow:</code>。</p>

<p>那在Autolayout时代如何计算cell的高度呢？因为<code>sizeWithFont:</code>方法已经不太实用了。其实Autolayout不但更简单，还可以不用写过多的计算代码达到自适应高度。
理论上是可以通过已知的完整的Constraints和view的属性来计算高度的，我们可以通过<code>systemLayoutSizeFittingSize:</code>方法来获取计算出来cell的size，我们知道cell的高度需要在tableView的代理方法<code>tableView:heightForRowAtIndexPath:</code>中实现的.</p>

<p>可以参照:<a href="http://blog.cnbluebox.com/blog/2015/02/02/autolayout2/">http://blog.cnbluebox.com/blog/2015/02/02/autolayout2/</a><br/>
和<a href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/">http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/</a>  这两篇文章基本讲的比较全面了.此处不重复.</p>

<p>核心的API是<code>systemLayoutSizeFittingSize:</code>,这个方法可以计算出cell在完整约束下的高度,其中使用这种方式需要注意的是:<br/>
1. UILabel以及UITextField等有<code>preferredMaxLayoutWidth</code>属性的VIew需要设置一下,不然计算出来的高度UILable的部分只有一行文字的高度<br/>
2. 对于具有<code>intrinsicContentSize</code>的View需要在垂直方向上,将压缩阻力 (Compression Resistance) 和 内容吸附 (Content Hugging)设置为1000,最高级
3. 要保证Cell在垂直方向上设置的Constraints,理论上可以计算出整个Cell的高度,可以降低某个垂直方向约束的优先级,来消除xib中的约束错误提示</p>

<h3>2.AutoLayout下的动画</h3>

<p>在使用Autolayout时，动画的使用和以前也不同了，以前我们是修改frame，现在我们可以通过修改Constraints, 然后在动画时layoutIfNeeded就行了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//修改约束
</span><span class='line'>...
</span><span class='line'>[UIView animateWithDuration:0.2 animations:^{
</span><span class='line'>    [view layoutIfNeeded];
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>
Autolayout有时在动画时候会很方便，因为View之间的坐标是相互影响的，在传统frame中，如果改变一个view的frame,那么可能你要更改很多view的frame，才能让页面显得和谐。在Autolayout中可能只需要修改一个Constraint就可以了，在做动画时会很方便。</p>

<h3>3.压缩阻力 (Compression Resistance) 和 内容吸附 (Content Hugging)</h3>

<p>对于<code>压缩阻力 (Compression Resistance) 和 内容吸附 (Content Hugging)</code>的介绍,可以参照这里:<a href="http://objccn.io/issue-3-5/">http://objccn.io/issue-3-5/</a><br/>
API中对应的是:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);
</span><span class='line'>- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);
</span><span class='line'>- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis NS_AVAILABLE_IOS(6_0);
</span><span class='line'>- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayout
</span><span class='line'>- </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoAgent+PHP 访问Google]]></title>
    <link href="http://douxinchun.github.io/blog/20150701/acccess-the-real-world-through-the-gfw.html"/>
    <updated>2015-07-01T10:53:00+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150701/acccess-the-real-world-through-the-gfw</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>GoAgent可以使用两种方式来翻墙上网:一种是官方推荐的,申请一个Google的Email账号,然后上传服务端需要的文件到Google App Engine;另外一种就就是通过国外的没有被屏蔽的PHP的空间来代替GAE作为服务端.<br/>
本人以前(2015年以前)一直是使用第一种方式,但后来由于国内对于GAE一直是重点的屏蔽对象,导致许多的公布的ip地址不可用,<a href="http://www.firefoxfan.com/">火狐范</a>上公布的ip也是只能用一两天,<a href="https://github.com/moonshawdo/checkgoogleip">checkgoogleip</a>上扫出来的ip,十个里面有9个都不靠谱,剩下的一个,没撑过2天也挂了.<br/>
实在不再愿意每天折腾iplist,所以决定Google一下,在PHP空间上部署goagent服务.</p>

<hr />

<p>注意! 本文goagent为3.2.3版本(具体而言是3.2.3版本) 运行于Linux  内核版本：2.6.32-531.29.2.lve1.3.11.1.el6.x86_64<br/>
客户端的系统是Mac OS X<br/>
如果你用的是Windows系统,推荐使用<a href="https://github.com/DIYgod/EasyGoAgent">Easy GoAgent</a>,开箱即用.</p>

<!--more-->


<h2>在PHP空间上部署goagent</h2>

<p>这个不难 相对于我这里gae需要每2天换一次ip PHP空间一般相对较少被屏蔽
不过一旦PHP空间被屏蔽 那就要重新申请其他的了.<br/>
国外的免费的PHP空间有很多,比如:<a href="http://www.vhostfull.com/">VHost Full</a>,<a href="http://cn.ecvps.com/">EcVps</a><br/>
这里以免费空间ecvps为例</p>

<ul>
<li>进入ecvps 申请免费空间 可以切换为中文页面显示 <a href="http://www.ecvps.com/client/cart.php?gid=3">订购免费版的地址</a></li>
<li>选择现在订购 填一些信息 注意注册信息不要写中文 最好写音译</li>
<li>关于信息 写的不要太离谱 比如地址要和邮编要对的上之类 防止审核为欺诈订单</li>
<li>一般申请成功 注册邮箱就会收到确认的email,如果出现提示了没有通过审核欺诈,记得回去充填一下资料,填的再靠谱一些.</li>
<li><p>在会员中心面板上 点击 我的信件 标签 然后打开<strong>New Account Information</strong>
里面有系统生成的 Domain Username Password
注意如果连续7天没有访问流量 则此空间会被删除<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2015/7/ecvps_my_letter.png"><br/>
<img src="http://douxinchun.github.io/blog_reference_image/2015/7/ecvps_newaccount.png"></p></li>
<li><p>下载安装FileZilla 或者其他的FTP软件
打开FileZilla 填写远程主机的一些信息 全部根据<strong>New Account Information</strong>来</p>

<blockquote><p>主机(Domain)<br/>
username.ecvps.net<br/>
用户名(Username) 就是New Account Information中的Username 如<br/>
username<br/>
密码(Password) 这个也根据New Account Information中给出的 填写<br/>
端口不用填 点快速连接<br/>
在本地站点中 选中goagent/server/php路径下的所有文件<br/>
上传到远程站点的 /domains/xinchun.ecvps.net/public_html目录下</p></blockquote></li>
</ul>


<p>如果FTP连接不上的,可以使用EcVps Control中自带的FileManager功能<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2015/7/ecvps_control.png"></p>

<p>打开goagent/local/proxy.ini文件 对于其中的[php]部分
改动两行就可以了 分别是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[php]
</span><span class='line'>enable = 1
</span><span class='line'>fetchserver = http://username.ecvps.net/index.php</span></code></pre></td></tr></table></div></figure>


<p>密码用可以用默认的
也可以不用 则要统一修改goagent/server/php路径下所有文件内设定的默认密码
网上一些文章用的是fetch.php 但注意新版goagent 3.2.3用的是index.php
这里有<a href="https://github.com/goagent/goagent/blob/wiki/FAQ.md">官方说明</a>,参见第13条,不要试图在浏览器里打开这个链接:  <a href="http://username.ecvps.net/index.php">http://username.ecvps.net/index.php</a></p>

<p>最后修改Chrome中的SwitchyOmega的自动切换的情景模式为GoAgent PHP</p>

<h2>启动</h2>

<p>用Terminal cd到goagent的local目录:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python proxy.py</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后就没有然后,<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2015/7/ecvps_google.png"></p>

<h2>开机启动</h2>

<p>安装一个GoagentMac(Mac),然后查看包的内容,找到Info.plist ,用文件编辑器编辑,修改一下key值 GoAgentPath的value为proxy.py的路径.</p>

<h2>额外内容</h2>

<p>使用探针
一般来说 到这里 启动goagent就可以上youtube也可以去下载视频了
如果想详细了解该PHP服务器的一些信息 可以使用探针
点击右上方的探针下载 会下载tz.zip文件 然后解压成tz.php
再上传到/domains/saburika.ecvps.net/public_html目录下
此时访问<a href="http://saburika.ecvps.net/tz.php">http://saburika.ecvps.net/tz.php</a> 就会出现你的php空间的详细信息了</p>

<p>第二种上传方式
不使用ftp上传 直接使用网页上传也是可以的
这个要阅读<strong>New Account Information中</strong>给出的相关信息
把给定的网址和端口复制到浏览器地址栏
用系统给自己生成的Username和Password登录
就会出现php空间的网页版操作面板了</p>

<h2>附件</h2>

<p><a href="https://github.com/goagent/goagent">goagent官方主页</a><br/>
SwitchyOmega在Goagent的安装包local目录下自带,并且带有备份文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在多台机器上协作使用Octopress]]></title>
    <link href="http://douxinchun.github.io/blog/20150630/use-octopress-in-different-machines.html"/>
    <updated>2015-06-30T13:49:49+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150630/use-octopress-in-different-machines</id>
    <content type="html"><![CDATA[<p>按照之前文章 <a href="http://douxinchun.github.io/blog/20150210/install-octopress.html">在GitHub上搭建Octopress</a> 中的步骤,就可以成功的搭建自己的Octopress框架下的博客了,但是接下来的问题是,如果这个是在公司的机器上搭建了环境,那么下班回到家后想继续更新一下自己的Blog怎么办呢.</p>

<p>其实,想想原理很简单,Git是一个版本管理系统(分布式的),如果我们在下班前把自己的文件提交到Git的远程库上,然后到家的时候,把家里的PC搭建一个Ruby的环境,再把有关的文件从远程库上pull下来,OK,万事大吉,又可以继续编写自己的Blog了.</p>

<h3>准备工作:</h3>

<p>参照  <a href="http://douxinchun.github.io/blog/20150210/install-octopress.html">在GitHub上搭建Octopress</a>  首先要在新机器上搭建一个Ruby的环境,Simple Guide:<br/>
*
   * 安装Git
   * 安装ruby,例如：Ruby 1.9.3-p125
   * 克隆项目</p>

<!--more-->


<p>接下来我们需要把GitHub上已经建好的博客项目clone下来。</p>

<p>克隆远程仓库到本地</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:username/username.github.com.git octopress ##octopress 为你的本地项目文件夹</span></code></pre></td></tr></table></div></figure>


<p>切换到source分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress ##进入项目
</span><span class='line'>$ git checkout source ##切换到本地的source分支</span></code></pre></td></tr></table></div></figure>


<p>创建_deploy目录(存在的话,直接同步),并和远程库的master分支同步</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir _deploy
</span><span class='line'>$ cd ./_deploy
</span><span class='line'>$ git pull origin master ##同步本地的master branch</span></code></pre></td></tr></table></div></figure>


<p>配置环境,在octopress目录下进行,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>然后它会询问你的项目仓库的URL:</p>

<blockquote><p>Enter the read/write url for your repository (For example, ‘git@github.com:your_username/your_username.github.com)</p></blockquote>

<p>输入仓库的URL，这样你就完成了全新的一个本地博客副本。</p>

<p>注意:以上操作只需要在完全没有环境的机器上执行一次,不需要每次都执行</p>

<h3>更新变化（重要）</h3>

<p>每次使用前，先确保拿到最新的文件(先GitHub上的远程库同步)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress  #进入项目目录
</span><span class='line'>$ git pull origin source  # 更新本地source branch
</span><span class='line'>$ cd ./_deploy  #进入_deploy目录
</span><span class='line'>$ git pull origin master  # 更新本地master branch</span></code></pre></td></tr></table></div></figure>


<p>提交</p>

<p>提交的时候，由于需要多台机器协作，需要把source分支push到origin中，这样另外一台机器才能拿到最新的源文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -am "提交注释" 
</span><span class='line'>$ git push origin source  # 将本地当前分支的更新推送到远程 source branch 
</span><span class='line'>$ rake deploy             # 更新远程 master branch，并部署博文</span></code></pre></td></tr></table></div></figure>


<p>另外的机器更新变化</p>

<p>在另外的机器上，就可以获取到相应的变化。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress  #进入项目目录
</span><span class='line'>$ git pull origin source  # 更新本地source branch
</span><span class='line'>$ cd ./_deploy  #进入_deploy目录
</span><span class='line'>$ git pull origin master  # 更新本地master branch和远程库的 master保持同步</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[冰与火之歌 守夜人誓言]]></title>
    <link href="http://douxinchun.github.io/blog/20150612/night-watcher-swear.html"/>
    <updated>2015-06-12T15:10:52+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150612/night-watcher-swear</id>
    <content type="html"><![CDATA[<p>最近重温了一遍Game of Throne , 感觉守夜人的誓词太霸气了。翻译的也是信达雅.</p>

<p>Night watcher swear(
&ldquo;Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men. I pledge my life and honor to the Night&rsquo;s Watch, for this night and all the nights to come.&rdquo;)</p>

<p>　守夜人誓言：「长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死於斯。我是黑暗中的利剑，长城上的守卫。我是抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。」<br/>
　<br/>
　<br/>
　
繁体版: <br/>
　　永夜终至，吾辈铭记，巍巍大任，死亦无终。 <br/>
　　无享妻爱，不履寸土，决绝子嗣，身归兄弟。 <br/>
　　何言无冕，兄弟所望，何争俗荣，袍泽同心，尽忠职守，生死于斯，心念所归，无惧无退.<br/>
　　铸兵利剑，暗夜无当；凝聚础石，长城屹立；腾焰熊熊，炽烈华光；耀耀破晓，璨以晨光；鸣无尽之号角，警外患之袭扰；锻坚钢之神盾，固王国之永宁.<br/>
　　于今挺身，奉以生命，以夜为始，死亦无终。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[加快Octopress国内访问速度]]></title>
    <link href="http://douxinchun.github.io/blog/20150511/accelerate-the-speed-of-access-octopress-in-china.html"/>
    <updated>2015-05-11T14:13:23+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150511/accelerate-the-speed-of-access-octopress-in-china</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>本文最主要引自<a href="http://www.chanjar.me/blog/2014/06/29/jia-kuai-octopressguo-nei-fang-wen-su-du/">加快octopress国内访问速度</a>和<a href="http://imxylz.com/blog/2013/09/22/move-google-fonts-to-local-server/">Octopress加速Google字体渲染</a>,以下内容是在这两篇博文的指导上结合自己实践经验的总结.</p>

<!--more-->


<p>在github中搭建好了Octopress后,访问速度非常的慢,这是引文Octopress使用了Google API的CDN服务和Google Fonts.Google的CDN访问速度在国外的网络环境下是非常快的,但是在天朝,非常非常的慢,尤其是使用了https来访问.</p>

<p>于是,为了加快访问速度,我们只好把Google的web fonts缓存到本地的服务器并更改jQuery的cdn服务.</p>

<h3>1.把jquery的cdn服务改成microsoft的</h3>

<p>编辑文件 source/_includes/head.html  找到下图注释掉的部分,替换成 <script src="//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js"></script></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js">&lt;/script>-->
</span><span class='line'>  &lt;script src="//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js">&lt;/script></span></code></pre></td></tr></table></div></figure>


<h3>2.缓存google fonts (将PT Serif和PT Sans缓存到本地)</h3>

<p>打开 source/_includes/custom/head.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
</span><span class='line'>&lt;link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
</span><span class='line'>&lt;link href="//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"></span></code></pre></td></tr></table></div></figure>


<p>
将 <a href="https://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic">https://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic</a>
以及 <a href="https://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic">https://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic</a> 中的内容复制到本地,并在 source/stylesheets 下新建pt_sans.css和pt_serif.css文件,文件部分内容如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* cyrillic-ext */
</span><span class='line'>@font-face {
</span><span class='line'>  font-family: 'PT Serif';
</span><span class='line'>  font-style: normal;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  src: local('PT Serif'), local('PTSerif-Regular'), url(https://fonts.gstatic.com/s/ptserif/v8/5hX15RUpPERmeybVlLQEWBkAz4rYn47Zy2rvigWQf6w.woff2) format('woff2');
</span><span class='line'>  unicode-range: U+0460-052F, U+20B4, U+2DE0-2DFF, U+A640-A69F;
</span><span class='line'>}
</span><span class='line'>/* cyrillic */
</span><span class='line'>@font-face {
</span><span class='line'>  font-family: 'PT Serif';
</span><span class='line'>  font-style: normal;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  src: local('PT Serif'), local('PTSerif-Regular'), url(https://fonts.gstatic.com/s/ptserif/v8/fU0HAfLiPHGlZhZpY6M7dBkAz4rYn47Zy2rvigWQf6w.woff2) format('woff2');
</span><span class='line'>  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
</span><span class='line'>}
</span><span class='line'>/* latin-ext */
</span><span class='line'>@font-face {
</span><span class='line'>  font-family: 'PT Serif';
</span><span class='line'>  font-style: normal;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  src: local('PT Serif'), local('PTSerif-Regular'), url(https://fonts.gstatic.com/s/ptserif/v8/CPRt--GVMETgA6YEaoGitxkAz4rYn47Zy2rvigWQf6w.woff2) format('woff2');
</span><span class='line'>  unicode-range: U+0100-024F, U+1E00-1EFF, U+20A0-20AB, U+20AD-20CF, U+2C60-2C7F, U+A720-A7FF;
</span><span class='line'>}
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>
注意,此处访问这两个链接可能需要翻墙.
新建一个目录 source/fonts 把字体解压缩到这个目录下.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>douxinchundeiMac:fonts douxinchun$ pwd
</span><span class='line'>/Users/douxinchun/octopress/source/fonts
</span><span class='line'>douxinchundeiMac:fonts douxinchun$ tree
</span><span class='line'>.
</span><span class='line'>├── pt_sans
</span><span class='line'>│   ├── 0XxGQsSc1g4rdRdjJKZrNAzyDMXhdD8sAj6OAJTFsBI.woff2
</span><span class='line'>│   ├── 7dSh6BcuqDLzS2qAASIeuoX0hVgzZQUfRDuZrPvH3D8.woff2
</span><span class='line'>│   ├── BJVWev7_auVaQ__OU8Qih1KPGs1ZzpMvnHX-7fPOuAc.woff2
</span><span class='line'>│   ├── CWlc_g68BGYDSGdpJvpktgLUuEpTyoUstqEm5AMlJo4.woff2
</span><span class='line'>│   ├── DVKQJxMmC9WF_oplMzlQqYX0hVgzZQUfRDuZrPvH3D8.woff2
</span><span class='line'>│   ├── GpWpM_6S4VQLPNAQ3iWvVYX0hVgzZQUfRDuZrPvH3D8.woff2
</span><span class='line'>│   ├── PIPMHY90P7jtyjpXuZ2cLJBw1xU1rKptJj_0jans920.woff2
</span><span class='line'>│   ├── fhNmDCnjccoUYyU4ZASaLVKPGs1ZzpMvnHX-7fPOuAc.woff2
</span><span class='line'>│   ├── g46X4VH_KHOWAAa-HpnGPgsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>│   ├── hpORcvLZtemlH8gI-1S-7gsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>│   ├── kTYfCWJhlldPf5LnG4ZnHAsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>│   ├── lILlYDvubYemzYzN7GbLkA7aC6SjiAOpAWOKfJDfVRY.woff2
</span><span class='line'>│   ├── lILlYDvubYemzYzN7GbLkBampu5_7CjHW5spxoeN3Vs.woff2
</span><span class='line'>│   ├── lILlYDvubYemzYzN7GbLkBdwxCXfZpKo5kWAx_74bHs.woff2
</span><span class='line'>│   ├── lILlYDvubYemzYzN7GbLkIjoYw3YTyktCCer_ilOlhE.woff2
</span><span class='line'>│   └── oysROHFTu1eTZ74Hcf8V-VKPGs1ZzpMvnHX-7fPOuAc.woff2
</span><span class='line'>└── pt_serif
</span><span class='line'>    ├── 03aPdn7fFF3H6ngCgAlQzAzyDMXhdD8sAj6OAJTFsBI.woff2
</span><span class='line'>    ├── 3Nwg9VzlwLXPq3fNKwVRMAsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>    ├── 5hX15RUpPERmeybVlLQEWBkAz4rYn47Zy2rvigWQf6w (1).woff2
</span><span class='line'>    ├── CPRt--GVMETgA6YEaoGitxkAz4rYn47Zy2rvigWQf6w.woff2
</span><span class='line'>    ├── Foydq9xJp--nfYIx2TBz9TrEaqfC9P2pvLXik1Kbr9s.woff2
</span><span class='line'>    ├── Foydq9xJp--nfYIx2TBz9WaVI6zN22yiurzcBKxPjFE.woff2
</span><span class='line'>    ├── Foydq9xJp--nfYIx2TBz9ZsnFT_2ovhuEig4Dh-CBQw.woff2
</span><span class='line'>    ├── Foydq9xJp--nfYIx2TBz9bllaL-ufMOTUcv7jfgmuJg.woff2
</span><span class='line'>    ├── I-OtoJZa3TeyH6D9oli3iXYhjbSpvc47ee6xR_80Hnw.woff2
</span><span class='line'>    ├── O_WhD9hODL16N4KLHLX7xQsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>    ├── QABk9IxT-LFTJ_dQzv7xpF4sYYdJg5dU2qzJEVSuta0.woff2
</span><span class='line'>    ├── QABk9IxT-LFTJ_dQzv7xpIgp9Q8gbYrhqGlRav_IXfk.woff2
</span><span class='line'>    ├── QABk9IxT-LFTJ_dQzv7xpKE8kM4xWR1_1bYURRojRGc.woff2
</span><span class='line'>    ├── QABk9IxT-LFTJ_dQzv7xpPZraR2Tg8w2lzm7kLNL0-w.woff2
</span><span class='line'>    ├── b31S45a_TNgaBApZhTgE6AsYbbCjybiHxArTLjt7FRU.woff2
</span><span class='line'>    └── fU0HAfLiPHGlZhZpY6M7dBkAz4rYn47Zy2rvigWQf6w.woff2
</span><span class='line'>
</span><span class='line'>2 directories, 32 files
</span><span class='line'>douxinchundeiMac:fonts douxinchun$</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>将文件pt_sans.css和pt_serif.css的web引用修改为本地引用,文件部分内容如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* cyrillic-ext */
</span><span class='line'>@font-face {
</span><span class='line'>  font-family: 'PT Sans';
</span><span class='line'>  font-style: normal;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  src: local('PT Sans'), local('PTSans-Regular'), url(/fonts/pt_sans/fhNmDCnjccoUYyU4ZASaLVKPGs1ZzpMvnHX-7fPOuAc.woff2) format('woff2');
</span><span class='line'>  unicode-range: U+0460-052F, U+20B4, U+2DE0-2DFF, U+A640-A69F;
</span><span class='line'>}
</span><span class='line'>/* cyrillic */
</span><span class='line'>@font-face {
</span><span class='line'>  font-family: 'PT Sans';
</span><span class='line'>  font-style: normal;
</span><span class='line'>  font-weight: 400;
</span><span class='line'>  src: local('PT Sans'), local('PTSans-Regular'), url(/fonts/pt_sans/BJVWev7_auVaQ__OU8Qih1KPGs1ZzpMvnHX-7fPOuAc.woff2) format('woff2');
</span><span class='line'>  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>编辑 source/_includes/custom/head.html 为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
</span><span class='line'>&lt;link href="http://douxinchun.github.io/stylesheets/pt_serif.css" rel="stylesheet" type="text/css">
</span><span class='line'>&lt;link href="http://douxinchun.github.io/stylesheets/pt_sans.css" rel="stylesheet" type="text/css"></span></code></pre></td></tr></table></div></figure>


<p></p>

<p>部署访问,速度果然快了很多.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS下安装SVN Server]]></title>
    <link href="http://douxinchun.github.io/blog/20150505/set-up-svnserver-under-centos.html"/>
    <updated>2015-05-05T14:12:48+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150505/set-up-svnserver-under-centos</id>
    <content type="html"><![CDATA[<h2>OverView</h2>

<p>之前搭建SVN Server都是在WindowsServer下直接安装一个<a href="https://www.visualsvn.com/">Visual SVN</a>,近期在一个项目中发现对方使用的是阿里云的云服务器,而且是CentOS的操作系统.特此记录一下自己的搭建过程,以备后用.</p>

<!--more-->


<p>整个过程分为5个部分.<br/>
1. 连接云服务器<br/>
2. 安装SVN Server<br/>
3. 配置SVN Server<br/>
4. 配置防火墙开通端口 <br/>
5. 启动SVN服务.<br/>
最后,我会在文章的末尾总结一下自己在搭建的过程中遇到的问题汇总.</p>

<h3>1.连接云服务器</h3>

<p>由于需要连接的是centOS系统,所有先放弃Windows和Mac OS X上的远端桌面连接工具吧.Windows上应该是需要一个SSH的客户端工具.<br/>
打开Terminal ,root 是username 后面跟的是ip地址</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>localhost:~ douxinchun$ ssh -l root 182.92.178.156</span></code></pre></td></tr></table></div></figure>


<p>
按照提示输入密码,登录成功后显示如下:</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Last login: Mon May  4 16:31:40 2015 from 111.203.240.200
</span><span class='line'>
</span><span class='line'>Welcome to aliyun Elastic Compute Service!
</span><span class='line'>
</span><span class='line'>[root@iZ256vx3u5fZ ~]#</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>2.安装SVN Server</h3>

<p>检查是否安装</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpm -qa subversion
</span><span class='line'>[root@iZ256vx3u5fZ /]# rpm -qa subversion
</span><span class='line'>subversion-1.6.11-12.el6_6.x86_64
</span><span class='line'>[root@iZ256vx3u5fZ /]#</span></code></pre></td></tr></table></div></figure>


<p>
卸载旧的版本</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum remove subversion</span></code></pre></td></tr></table></div></figure>


<p>安装</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install -y subversion</span></code></pre></td></tr></table></div></figure>


<p>验证安装是否成功</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve --version
</span><span class='line'>[root@iZ256vx3u5fZ /]# svnserve --version
</span><span class='line'>svnserve，版本 1.6.11 (r934486)
</span><span class='line'>   编译于 Feb 10 2015，22:08:22
</span><span class='line'>
</span><span class='line'>版权所有 (C) 2000-2009 CollabNet。
</span><span class='line'>Subversion 是开放源代码软件，请参阅 http://subversion.tigris.org/ 站点。
</span><span class='line'>此产品包含由 CollabNet(http://www.Collab.Net/) 开发的软件。
</span><span class='line'>
</span><span class='line'>下列版本库后端(FS) 模块可用: 
</span><span class='line'>
</span><span class='line'>* fs_base : 模块只能操作BDB版本库。
</span><span class='line'>* fs_fs : 模块与文本文件(FSFS)版本库一起工作。
</span><span class='line'>
</span><span class='line'>Cyrus SASL 认证可用。
</span><span class='line'>
</span><span class='line'>[root@iZ256vx3u5fZ /]#</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>3.配置SVN Server</h3>

<p>首先,创建一个SVN的版本库</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@iZ256vx3u5fZ svn]# mkdir /home/svn/testRepo
</span><span class='line'>[root@iZ256vx3u5fZ svn]# svnadmin create /home/svn/testRepo
</span><span class='line'>[root@iZ256vx3u5fZ svn]# cd /home/svn/testRepo/
</span><span class='line'>[root@iZ256vx3u5fZ testRepo]# ls -a
</span><span class='line'>.  ..  conf  db  format  hooks  locks  README.txt</span></code></pre></td></tr></table></div></figure>


<p> 如果创建成功,testRepo目录下会多出几个文件夹,进入到conf文件夹会有3个配置文件:<br/>
 (1). svnserve.conf:  svn服务综合配置文件. <br/>
 (2). passwd:  用户名口令文件。<br/>
 (3). authz:   权限配置文件</p>

<h4>passwd文件</h4>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[users]
</span><span class='line'># harry = harryssecret
</span><span class='line'># sally = sallyssecret
</span><span class='line'>svnuser=123456</span></code></pre></td></tr></table></div></figure>


<p>svnuser为用户名.123456为密码</p>

<h4>authz文件</h4>

<p>添加一行这个</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[/]
</span><span class='line'>svnuser=rw</span></code></pre></td></tr></table></div></figure>


<p>意思是svnuser用户对所有的目录有读写权限,如果需要详细的分组,可以参照这里[<a href="http://www.blogjava.net/rockblue1988/archive/2014/11/19/420246.aspx">http://www.blogjava.net/rockblue1988/archive/2014/11/19/420246.aspx</a>]</p>

<h4>svnserve.conf文件</h4>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#匿名访问者权限
</span><span class='line'>anon-access = none
</span><span class='line'>#验证用户权限
</span><span class='line'>auth-access = write
</span><span class='line'>#密码文件地址
</span><span class='line'>password-db = /home/svn/testRepo/passwd
</span><span class='line'>#权限文件地址
</span><span class='line'>authz-db = /home/svn/testRepo/authz
</span><span class='line'>#项目名称（UUID）
</span><span class='line'>realm =testRepo</span></code></pre></td></tr></table></div></figure>


<p>采用默认配置. 以上语句都必须顶格写, 左侧不能留空格, 否则会出错.</p>

<h3>4.打开Linux下的防火墙端口</h3>

<p>默认是3690端口，你也可以用别的。已开启的跳过这一步</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>修改
</span><span class='line'>iptables -I INPUT -p tcp --dport 3690 -j ACCEPT
</span><span class='line'>保存
</span><span class='line'>/etc/rc.d/init.d/iptables save
</span><span class='line'>重启
</span><span class='line'>service iptables restart
</span><span class='line'>查看
</span><span class='line'>/etc/init.d/iptables status</span></code></pre></td></tr></table></div></figure>


<h3>5.启动SVN服务</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve -d -r /home/svn</span></code></pre></td></tr></table></div></figure>


<p>-d:守护进程
-r:svn根目录
这里注意启动时的目录一定不要再往下写一级,不然客户端再按照下面的地址访问的时候,会提示错误:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>XXXXXXX(别怪我,实在记不清了)non existent in revision 0</span></code></pre></td></tr></table></div></figure>


<p>
假设服务端IP为182.92.178.156，那么如下设置后testRepo的访问目录就为：
svn://182.92.178.156:3690/testRepo</p>

<p>如果端口被占用可以重新换一个端口运行,更换端口可以让一台服务器运行多个SVN Server,不要忘记按照第4步在iptable中打开相应的端口</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve -d -r /home/svn  --listen-port 3391</span></code></pre></td></tr></table></div></figure>


<p>关闭SVN服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -aux|grep svn  
</span><span class='line'>kill 1755 进程id</span></code></pre></td></tr></table></div></figure>


<p>启动完成后,客户端就可以成功的连接了<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2015/5/svn_client.png"></p>

<hr />

<h3>6.遇到的问题</h3>

<p>1.端口被占用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve: 不能绑定服务器套接字: 地址已在使用</span></code></pre></td></tr></table></div></figure>


<p>更换端口,或者关闭正在运行的SVN服务,参见第5步,启动服务</p>

<p>2.导入工程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir MyProject  
</span><span class='line'>$ mkdir MyProject/trunk  
</span><span class='line'>$ mkdir MyProject/branches  
</span><span class='line'>$ mkdir MyProject/tags  
</span><span class='line'>svn import MyProject svn://182.92.178.156/testRepo/MyProject -m "first import project"</span></code></pre></td></tr></table></div></figure>


<p>3.导出工程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn co svn://192.168.5.228/testRepo/MyProject</span></code></pre></td></tr></table></div></figure>


<p>4.客户端查看不到日志<br/>
修改svnserver.conf文件里面：
anon-access = read &ndash;>修改为 anon-access = none</p>

<h3>7.添加开机启动</h3>

<p>首先：编写一个启动脚本svn_startup.sh，我放在/root/svn_startup.sh</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>/usr/bin/svnserve -d -r /home/svn/</span></code></pre></td></tr></table></div></figure>


<p>这里的svnserve路径保险起见，最好写绝对路径,因为启动的时候，环境变量也许没加载.
绝对路径怎么查?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>which svnserve</span></code></pre></td></tr></table></div></figure>


<p>这里还有可能碰到一个问题，如果你在windows下建立和编写的脚步，拿到linux下，用vi或者vim修改后可能会无法执行，这是文件格式的问题</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi svn_startup.sh
</span><span class='line'>输入:set ff 回车
</span><span class='line'>如果显示的结果不是fileformat=unix
</span><span class='line'>再次输入
</span><span class='line'>set ff=unix
</span><span class='line'>就OK了</span></code></pre></td></tr></table></div></figure>


<p>然后修改该脚本的执行权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod ug+x svn_startup.sh</span></code></pre></td></tr></table></div></figure>


<p>或者万能的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 777 svn_startup.sh</span></code></pre></td></tr></table></div></figure>


<p>最后：加入自动运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/rc.d/rc.local</span></code></pre></td></tr></table></div></figure>


<p>在末尾添加脚本的路径，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/root/svn_startup.sh</span></code></pre></td></tr></table></div></figure>


<p>现在，你可以重启一下试试了。 不懂得怎么确认成功？败给你了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps -ef|grep svnserve</span></code></pre></td></tr></table></div></figure>


<h3>参考来源</h3>

<p><a href="http://blog.csdn.net/shangliuyan/article/details/7351675">http://blog.csdn.net/shangliuyan/article/details/7351675</a>
<a href="http://www.blogjava.net/rockblue1988/archive/2014/11/19/420246.aspx">http://www.blogjava.net/rockblue1988/archive/2014/11/19/420246.aspx</a>
<a href="http://www.centoscn.com/CentosServer/ftp/2014/0306/2505.html">http://www.centoscn.com/CentosServer/ftp/2014/0306/2505.html</a>
<a href="http://www.blogjava.net/nkjava/archive/2011/08/29/357502.html">http://www.blogjava.net/nkjava/archive/2011/08/29/357502.html</a>
<a href="http://bbs.csdn.net/topics/390757995">http://bbs.csdn.net/topics/390757995</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode常用的插件集合]]></title>
    <link href="http://douxinchun.github.io/blog/20150401/xcode-plugin-collection.html"/>
    <updated>2015-04-01T10:24:50+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150401/xcode-plugin-collection</id>
    <content type="html"><![CDATA[<p>本文主要总结了一下,我在Xcode下经常使用的的插件.</p>

<h2>1.Alcatraz</h2>

<p>Alcatraz是一个Xcode的开源的包管理工具.使用它,我们可以查找和安装各种各样的插件,模板以及配色方案.<br/>
安装Alcatraz很简单,打开Terminal,把下面一行粘贴进命令行即可,安装之前,友情提示:Alcatraz is available for OSX 10.9+ and Xcode 5+ only.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh | sh</span></code></pre></td></tr></table></div></figure>


<p>
删除插件命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</span></code></pre></td></tr></table></div></figure>


<p>
清空Alcatraz缓存的命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf ~/Library/Application\ Support/Alcatraz</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>安装完成之后 ,最后提示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alcatraz successfully installed!!1!🍻   Please restart your Xcode.</span></code></pre></td></tr></table></div></figure>


<p>
重启Xcode,发现在Windows菜单项下会多出一个Pachage Manager的项,快捷键是⇧⌘9</p>

<!--more-->


<h2>2.VVDocumenter</h2>

<p>VVDocumenter可以帮我们自动生成注释文档,使用的方式也非常简单.在任何的类,方法或者你需要插入注释的地方输入&#8221;///&ldquo;即可,这里引用一张原作者的gif图片来说明效果:<br/>
<img src="https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966"></p>

<p>安装方式也很简单,
1.Alcatraz ,如果你安装了Alcatraz,直接打开Xcode->⇧⌘9->搜索VVDocumenter,Install.<br/>
2.如果不想安装Alcatraz,把整个项目clone到本地,然后在Xcode中编译(⌘B),重启Xcode,Windows->会出现一个VVDocumenter项.安装成功.<br/>
如果还不放心,可以在这查找到插件的存在 ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</p>

<p>GitHub:git@github.com:onevcat/VVDocumenter-Xcode.git</p>

<h2>3.RTImageAssets</h2>

<p>用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A 即可自动生成两张低清的补全空位。当然你也可以从 @2x 的图生成 @3x 版本，如果你对图片质量要求不高的话.
附一张使用效果的gif<br/>
<img src="https://github.com/rickytan/RTImageAssets/raw/master/ScreenCap/usage.gif"></p>

<p>GitHub:git@github.com:rickytan/RTImageAssets.git</p>

<h2>4.XAlign</h2>

<p>自动对齐,效果gif图:</p>

<p><img src="https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966"></p>

<p>安装方式 Terminal,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># install
</span><span class='line'>    $ curl http://qfi.sh/XAlign/build/install.sh | sh
</span><span class='line'>
</span><span class='line'>    or
</span><span class='line'>    
</span><span class='line'>    # update
</span><span class='line'>    $ curl http://qfi.sh/XAlign/build/update.sh | sh</span></code></pre></td></tr></table></div></figure>


<h2>5.ClangFormat</h2>

<p>代码格式化工具</p>

<p><img src="https://camo.githubusercontent.com/758d8d2c87f7ec1bb3b6882d6500fe4cf5252759/68747470733a2f2f7261772e6769746875622e636f6d2f7472617669736a6566666572792f436c616e67466f726d61742d58636f64652f6d61737465722f524541444d452f636c616e67666f726d61742d78636f64652d64656d6f2e676966"></p>

<h2>6.Auto Importer for Xcode</h2>

<p>自动引入头文件</p>

<p><img src="https://github.com/lucholaf/Auto-Importer-for-Xcode/raw/master/demo.gif"></p>

<h2>7.KSImageNamed-Xcode</h2>

<p>图片名称自动补全<br/>
<img src="https://camo.githubusercontent.com/c354bf04524df86daeabe7a6d2b9926fac790f85/68747470733a2f2f7261772e6769746875622e636f6d2f6b7375746865722f4b53496d6167654e616d65642d58636f64652f6d61737465722f73637265656e73686f742e676966"></p>

<h2>8.ZLGotoSandboxPlugin-Xcode</h2>

<p>快速定位simulator的沙盒路径 <a href="https://github.com/MakeZL/ZLGotoSandboxPlugin">https://github.com/MakeZL/ZLGotoSandboxPlugin</a></p>

<h2>9.XcodeColors</h2>

<p>Debug的时侯使控制台输出的日志带有色彩,一般配合<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a>来使用<br/>
<img src="http://douxinchun.github.io/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>
]]></content>
  </entry>
  
</feed>

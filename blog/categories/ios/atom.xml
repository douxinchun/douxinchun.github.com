<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios | 冷雨之家]]></title>
  <link href="http://douxinchun.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2018-05-01T19:33:09+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 操作系统目录说明]]></title>
    <link href="http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming.html"/>
    <updated>2017-01-03T11:28:24+08:00</updated>
    <id>http://douxinchun.github.io/blog/20170103/ios-cao-zuo-xi-tong-mu-lu-shuo-ming</id>
    <content type="html"><![CDATA[<p>iOS的设备越狱后,安装openssh,可以通过ssh连接工具(Mac OS 下直接使用Terminal)连接到手机上查看相关的系统目录:
ssh 连接命令常用格式:
`ssh [-l login_name] [-p port] [user@]hostname<br/>
示例:<br/>
$ ssh <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x30;&#46;&#50;&#x2e;&#x39;&#x38;&#46;&#x38;&#x37;">&#x72;&#111;&#x6f;&#x74;&#64;&#49;&#x30;&#46;&#50;&#x2e;&#x39;&#56;&#x2e;&#56;&#55;</a><br/>
默认的openssh连接密码为:alpine</p>

<p>一、iPhone的图片是放在：/private /var/ mobile/Media /DCIM当中的。</p>

<!--more-->


<p>二、iPhone中其他基本文件的存放文件目录如下：<br/>
1、/Applications<br/>
常用软件的安装目录<br/>
2. /private/var/mobile/Media/iphone video Recorder
iphone video Recorder录像文件存放目录</p>

<table>
<thead>
<tr>
<th>path     </th>
<th style="text-align:center;"> description</th>
</tr>
</thead>
<tbody>
<tr>
<td>iphone video Recorderdfsajdfks</td>
<td style="text-align:center;">的飞机考六级来看看带分了</td>
</tr>
</tbody>
</table>


<hr />

<hr />

<table>
<thead>
<tr>
<th>First Header </th>
<th> Second Header </th>
<th> Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<p> 录像文件存放目录 | /private /var/ mobile/Media /iphone video Recorder
3、/private /var/ mobile/Media /DCIM <br/>
相机拍摄的照片文件存放目录<br/>
4、/private/var/ mobile /Media/iTunes_Control/Music <br/>
iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。<br/>
5、/private /var/root/Media/EBooks<br/>
熊猫看书存放目录 <br/>
6、/Library/Ringtones<br/>
系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可） <br/>
7、/System/Library/Audio/UISounds<br/>
短信记其它系统默认效果铃声（m4r铃声文件改扩展名为.caf）短信铃声文件名为sms-received开头的caf文件<br/>
8、/private/var/ mobile /Library/AddressBook<br/>
系统电话本的存放目录。<br/>
9、/private /var/ mobile/Media /iphone Recorder<br/>
iphone Recorder录音软件文件存放目录<br/>
10、/Applications/Preferences.app/zh_CN.lproj<br/>
软件Preferences.app的中文汉化文件存放目录<br/>
11、/Library/Wallpaper <br/>
系统q1ang纸的存放目录<br/>
12、/System/Library/Audio/UISounds <br/>
系统声音文件的存放目录<br/>
13、/private/var/root/Media/PXL <br/>
ibrickr上传安装程序建立的一个数据库，估计和windows的uninstall记录差不多。<br/>
14、/bin <br/>
和linux系统差不多，是系统执行指令的存放目录。 <br/>
15、/private/var/ mobile /Library/SMS <br/>
系统短信的存放目录<br/>
16、/private/var/run<br/>
系统进程运行的临时目录？（查看这里可以看到系统启动的所有进程）<br/>
17、/private/var/logs/CrashReporter<br/>
系统错误记录报</p>

<h3>iPhone 特殊文件目录介绍</h3>

<ol>
<li>/private/var/mobile<br/>
新刷完的机器，要在这个文件夹下建一个Documents的目录。</li>
<li>/private/var/mobile/Applications<br/>
通过AppStore和iTunes安装的程序都在里面。</li>
<li>/private/var/stash<br/>
这个文件夹下的Applications目录里面是所有通过Cydia和app安装的程序，Ringtones目录里是所有的手机铃音，自制铃音直接拷在里面即可，Themes目录里是所有Winterboard主题，可以手工修改。</li>
<li>/var/mobile/Media/ROMs/GBA　<br/>
gpsPhone模拟器存放rom的目录。</li>
<li>/var/mobile/Media/textReader<br/>
textReader看书软件读取的电子书的存放路径。</li>
<li>/System/Library/Fonts/Cache<br/>
系统字体目录，要替换的字体放在该目录下，权限644不变</li>
<li>/private/var/mobile/Media/Maps<br/>
离线地图目录，把地图文件夹放到该目录下，文件夹赋予777权限</li>
<li>/private/var/mobile/Library/Downloads<br/>
ipa文件存放目录，用Installous安装</li>
<li>/private/var/mobile/Library/Keyboard<br/>
系统拼音字库文件位置</li>
<li>/var/stash/Themes.XXXXXX<br/>
winterboard主题文件存放路径</li>
<li>/private/var/mobile/Media/DCIM/999APPLE<br/>
系统自带截屏文件存放路径</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple远程推送Pem证书生成-命令备忘]]></title>
    <link href="http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate.html"/>
    <updated>2016-08-26T11:12:01+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate</id>
    <content type="html"><![CDATA[<h3>Develoepr Environment</h3>

<ol>
<li>去Apple Develop 网站申请Push证书并下载导入到Keychain中.</li>
<li>从Keychain中分别导出证书和密钥的.p12文件:cer.p12 key.p12<br/>
交换密码为:123456</li>
<li><p>使用openssl 将cer.p12及key.p12转成cer.pem和key.pem<br/>
命令如下:</p>

<pre><code>$ openssl pkcs12 -clcerts -nokeys -out cer.pem -in cer.p12
$ openssl pkcs12 -nocerts -out key.pem -in key.p12
</code></pre>

<p>转换密钥文件时候,提示输一个pem的密码,转换完成后清除pem密码的命令:</p>

<pre><code>$ openssl rsa -in key.pem -out key.pem  
</code></pre></li>
<li><p>合并cer.pem及key.pem</p>

<pre><code>$ cat cer.pem key.pem &gt; cer_key.pem
</code></pre></li>
</ol>


<h3>Release Environment 过程同上</h3>

<p>PS.<br/>
测试生成的cer.pem及key.pem是否可用<br/>
<code>
$ openssl s_client -connect gateway.push.apple.com:2195  -cert cer.pem -key key.pem
</code><br/>
注：gateway.push.apple.com:2195用于appStore app;<br/>
   gateway.sandbox.push.apple.com:2195用于沙盒app;<br/>
   以上命令执行后会打印一大罗信息，最后处于可输入状态，打几个字符回车后自动断开连接即为正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<pre><code>#define NSLog(...) DDLogInfo(__VA_ARGS__)
</code></pre>

<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<pre><code>...
NSDateFormatter *threadUnsafeDateFormatter;
threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
...  

-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{

    NSString *levelStr = nil;
    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];

    switch (logMessage.flag) {
        case DDLogFlagError:
        {
            levelStr=@"[ERROR]";
            break;
        }
        case DDLogFlagWarning:{
            levelStr=@"[WARN ]";
            break;
        }
        case DDLogFlagDebug:{
            levelStr=@"[DEBUG]";
            break;
        }
        case DDLogFlagInfo:
        {
            levelStr=@"[INFO ]";
            break;
        }
        default:
            levelStr=@"[VBOSE]";
            break;
    }

    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
}
</code></pre>

<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<pre><code> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个

    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];

    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];

    DDLogError(@"DDLogError 中文错误");      // red
    DDLogWarn(@"DDLogWarn 中文警告");        // orange
    DDLogDebug(@"DDLogDebug 中文调试");      // blue
    DDLogInfo(@"DDLogInfo 中文信息");        // purple
    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</code></pre>

<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<pre><code>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</code></pre>

<h3>2.4为特定的Log级别设定颜色</h3>

<pre><code>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</code></pre>

<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS SDK中的私有API]]></title>
    <link href="http://douxinchun.github.io/blog/20151009/private-api-in-ios.html"/>
    <updated>2015-10-09T14:37:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20151009/private-api-in-ios</id>
    <content type="html"><![CDATA[<p>由于是私有API,再键入的时候不会有提示,注意在提交AppStore之前需要全部删除.</p>

<p>1.查看View的层次结构</p>

<blockquote><p>recursiveDescription</p></blockquote>

<p>eg:查看UISearchBar的View层级,找到Cancel-Button的位置并修改该按钮的样式</p>

<pre><code class="objc">    UISearchBar *searchBarView  = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, 375, 44)];
    searchBarView.showsCancelButton = YES;
    //私有API,直接发消息给searchBarView的吧,编译器是不会过的,不信你试试看~~
    NSLog(@"%@",[searchBarView performSelector:@selector(recursiveDescription)]);
</code></pre>

<p>打印结果如下:</p>

<pre><code>2015-10-09 15:12:20.568 findAward[5625:756750] &lt;UISearchBar: 0x144574710; frame = (0 0; 375 44); text = ''; gestureRecognizers = &lt;NSArray: 0x174247b90&gt;; layer = &lt;CALayer: 0x174430040&gt;&gt;
   | &lt;UIView: 0x17418d750; frame = (0 0; 375 44); clipsToBounds = YES; autoresize = W+H; layer = &lt;CALayer: 0x17442ff80&gt;&gt;
   |    | &lt;UISearchBarBackground: 0x1445a4240; frame = (0 0; 375 44); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x174431200&gt;&gt;
   |    | &lt;UINavigationButton: 0x14452b250; frame = (0 0; 34 30); opaque = NO; layer = &lt;CALayer: 0x17442e4c0&gt;&gt;
   |    | &lt;UISearchBarTextField: 0x144645db0; frame = (0 0; 0 0); text = ''; clipsToBounds = YES; opaque = NO; layer = &lt;CALayer: 0x1702213a0&gt;&gt;
   |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x1445732c0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17442fac0&gt;&gt;  
</code></pre>

<p>根据打印的结果,我们可以看出,UISearchBar的二级subview里有一个,<code>UINavigationButton</code>随便猜猜,这个也是<code>UIButton</code>的子类了.故要获得它并修改他的样式的code如下:<br/>
<code>objc  
 for (UIView *view in [[searchBarView.subviews lastObject] subviews]) {
                if ([view isKindOfClass:[UIButton class]]) {
                    UIButton *cancelBtn = (UIButton *)view;
                    [cancelBtn setTitle:@"取消" forState:UIControlStateNormal];
                    [cancelBtn setTitleColor:COLOR_EA4426 forState:UIControlStateNormal];
                    [cancelBtn setTitleColor:COLOR_EA4426 forState:UIControlStateHighlighted];
                }
            }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 统计项目中代码的行数]]></title>
    <link href="http://douxinchun.github.io/blog/20150901/cloc.html"/>
    <updated>2015-09-01T10:09:12+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150901/cloc</id>
    <content type="html"><![CDATA[<h3>方法一:</h3>

<p>终端命令进入项目目录下，命令如下<br/>
<code>
find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l  
</code><br/>
列出每个文件的行数<br/>
<code>
find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs grep -v "^$"|wc -l  
</code>
列出代码行数总和</p>

<pre><code>grep -v "^$"是去掉空行
</code></pre>

<p>注释也统计在代码量之内</p>

<h3>方法二:</h3>

<p>使用CLOC,项目说明地址:<a href="http://cloc.sourceforge.net/">http://cloc.sourceforge.net/</a><br/>
  1.64 Perl脚本下载地址,<a href="https://github.com/douxinchun/CLOC">https://github.com/douxinchun/CLOC</a></p>

<p>使用方法:<br/>
perl cloc-1.64.pl ./YourProjectName</p>

<p>result:</p>

<pre><code>     200 files
     744 text files.
     630 unique files.                                          
     315 files ignored.

http://cloc.sourceforge.net v 1.64  T=2.56 s (199.8 files/s, 22014.2 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Objective C                    242           6916           4208          28460
C/C++ Header                   265           3605           8066           4870
JSON                             3              0              0            107
Bourne Shell                     1              5              0             65
-------------------------------------------------------------------------------
SUM:                           511          10526          12274          33502
-------------------------------------------------------------------------------
</code></pre>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios | 冷雨之家]]></title>
  <link href="http://douxinchun.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2016-08-26T19:28:28+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[NewSpring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apple远程推送Pem证书生成-命令备忘]]></title>
    <link href="http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate.html"/>
    <updated>2016-08-26T11:12:01+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160826/apple-remote-notificatoin-push-pem-file-generate</id>
    <content type="html"><![CDATA[<h3>Develoepr Environment</h3>

<ol>
<li>去Apple Develop 网站申请Push证书并下载导入到Keychain中.</li>
<li>从Keychain中分别导出证书和密钥的.p12文件:cer.p12 key.p12<br/>
交换密码为:123456</li>
<li><p>使用openssl 将cer.p12及key.p12转成cer.pem和key.pem<br/>
命令如下:</p>

<pre><code>$ openssl pkcs12 -clcerts -nokeys -out cer.pem -in cer.p12
$ openssl pkcs12 -nocerts -out key.pem -in key.p12
</code></pre>

<p>转换密钥文件时候,提示输一个pem的密码,转换完成后清除pem密码的命令:</p>

<pre><code>$ openssl rsa -in key.pem -out key.pem  
</code></pre></li>
<li><p>合并cer.pem及key.pem</p>

<pre><code>$ cat cer.pem key.pem &gt; cer_key.pem
</code></pre></li>
</ol>


<h3>Release Environment 过程同上</h3>

<p>PS.<br/>
测试生成的cer.pem及key.pem是否可用<br/>
<code>
$ openssl s_client -connect gateway.push.apple.com:2195  -cert cer.pem -key key.pem
</code><br/>
注：gateway.push.apple.com:2195用于appStore app;<br/>
   gateway.sandbox.push.apple.com:2195用于沙盒app;<br/>
   以上命令执行后会打印一大罗信息，最后处于可输入状态，打几个字符回车后自动断开连接即为正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<pre><code>#define NSLog(...) DDLogInfo(__VA_ARGS__)
</code></pre>

<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<pre><code>...
NSDateFormatter *threadUnsafeDateFormatter;
threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
...  

-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{

    NSString *levelStr = nil;
    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];

    switch (logMessage.flag) {
        case DDLogFlagError:
        {
            levelStr=@"[ERROR]";
            break;
        }
        case DDLogFlagWarning:{
            levelStr=@"[WARN ]";
            break;
        }
        case DDLogFlagDebug:{
            levelStr=@"[DEBUG]";
            break;
        }
        case DDLogFlagInfo:
        {
            levelStr=@"[INFO ]";
            break;
        }
        default:
            levelStr=@"[VBOSE]";
            break;
    }

    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
}
</code></pre>

<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<pre><code> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个

    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];

    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];

    DDLogError(@"DDLogError 中文错误");      // red
    DDLogWarn(@"DDLogWarn 中文警告");        // orange
    DDLogDebug(@"DDLogDebug 中文调试");      // blue
    DDLogInfo(@"DDLogInfo 中文信息");        // purple
    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</code></pre>

<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<pre><code>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</code></pre>

<h3>2.4为特定的Log级别设定颜色</h3>

<pre><code>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</code></pre>

<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS SDK中的私有API]]></title>
    <link href="http://douxinchun.github.io/blog/20151009/private-api-in-ios.html"/>
    <updated>2015-10-09T14:37:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20151009/private-api-in-ios</id>
    <content type="html"><![CDATA[<p>由于是私有API,再键入的时候不会有提示,注意在提交AppStore之前需要全部删除.</p>

<p>1.查看View的层次结构</p>

<blockquote><p>recursiveDescription</p></blockquote>

<p>eg:查看UISearchBar的View层级,找到Cancel-Button的位置并修改该按钮的样式</p>

<pre><code class="objc">    UISearchBar *searchBarView  = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, 375, 44)];
    searchBarView.showsCancelButton = YES;
    //私有API,直接发消息给searchBarView的吧,编译器是不会过的,不信你试试看~~
    NSLog(@"%@",[searchBarView performSelector:@selector(recursiveDescription)]);
</code></pre>

<p>打印结果如下:</p>

<pre><code>2015-10-09 15:12:20.568 findAward[5625:756750] &lt;UISearchBar: 0x144574710; frame = (0 0; 375 44); text = ''; gestureRecognizers = &lt;NSArray: 0x174247b90&gt;; layer = &lt;CALayer: 0x174430040&gt;&gt;
   | &lt;UIView: 0x17418d750; frame = (0 0; 375 44); clipsToBounds = YES; autoresize = W+H; layer = &lt;CALayer: 0x17442ff80&gt;&gt;
   |    | &lt;UISearchBarBackground: 0x1445a4240; frame = (0 0; 375 44); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x174431200&gt;&gt;
   |    | &lt;UINavigationButton: 0x14452b250; frame = (0 0; 34 30); opaque = NO; layer = &lt;CALayer: 0x17442e4c0&gt;&gt;
   |    | &lt;UISearchBarTextField: 0x144645db0; frame = (0 0; 0 0); text = ''; clipsToBounds = YES; opaque = NO; layer = &lt;CALayer: 0x1702213a0&gt;&gt;
   |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x1445732c0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17442fac0&gt;&gt;  
</code></pre>

<p>根据打印的结果,我们可以看出,UISearchBar的二级subview里有一个,<code>UINavigationButton</code>随便猜猜,这个也是<code>UIButton</code>的子类了.故要获得它并修改他的样式的code如下:<br/>
<code>objc  
 for (UIView *view in [[searchBarView.subviews lastObject] subviews]) {
                if ([view isKindOfClass:[UIButton class]]) {
                    UIButton *cancelBtn = (UIButton *)view;
                    [cancelBtn setTitle:@"取消" forState:UIControlStateNormal];
                    [cancelBtn setTitleColor:COLOR_EA4426 forState:UIControlStateNormal];
                    [cancelBtn setTitleColor:COLOR_EA4426 forState:UIControlStateHighlighted];
                }
            }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 统计项目中代码的行数]]></title>
    <link href="http://douxinchun.github.io/blog/20150901/cloc.html"/>
    <updated>2015-09-01T10:09:12+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150901/cloc</id>
    <content type="html"><![CDATA[<h3>方法一:</h3>

<p>终端命令进入项目目录下，命令如下<br/>
<code>
find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l  
</code><br/>
列出每个文件的行数<br/>
<code>
find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs grep -v "^$"|wc -l  
</code>
列出代码行数总和</p>

<pre><code>grep -v "^$"是去掉空行
</code></pre>

<p>注释也统计在代码量之内</p>

<h3>方法二:</h3>

<p>使用CLOC,项目说明地址:<a href="http://cloc.sourceforge.net/">http://cloc.sourceforge.net/</a><br/>
  1.64 Perl脚本下载地址,<a href="https://github.com/douxinchun/CLOC">https://github.com/douxinchun/CLOC</a></p>

<p>使用方法:<br/>
perl cloc-1.64.pl ./YourProjectName</p>

<p>result:</p>

<pre><code>     200 files
     744 text files.
     630 unique files.                                          
     315 files ignored.

http://cloc.sourceforge.net v 1.64  T=2.56 s (199.8 files/s, 22014.2 lines/s)
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Objective C                    242           6916           4208          28460
C/C++ Header                   265           3605           8066           4870
JSON                             3              0              0            107
Bourne Shell                     1              5              0             65
-------------------------------------------------------------------------------
SUM:                           511          10526          12274          33502
-------------------------------------------------------------------------------
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用itms-services 协议来发布ipa文件]]></title>
    <link href="http://douxinchun.github.io/blog/20150722/distribute-ipa-by-itms-services.html"/>
    <updated>2015-07-22T16:45:35+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150722/distribute-ipa-by-itms-services</id>
    <content type="html"><![CDATA[<p>苹果允许用itms-services协议来直接在iphone/ipad上安装应用程序，我们可以直接生成该协议需要的相关文件，这样产品经理和测试都可以直接在设备上安装新版的应用:</p>

<p>需要两个文件，一个是html，另一个是plist。</p>

<p>文件index.html(请自动忽略css部分,我实在不会写前端):
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html>
</span><span class='line'>&lt;head>
</span><span class='line'>    &lt;style>
</span><span class='line'>        body {
</span><span class='line'>            font-size: 50px;
</span><span class='line'>            margin-top:100px;
</span><span class='line'>            margin-left:auto;
</span><span class='line'>            margin-right:auto;
</span><span class='line'>            text-align:center;
</span><span class='line'>        }
</span><span class='line'>    &lt;/style>
</span><span class='line'>&lt;/head>
</span><span class='line'>&lt;body>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>iOS 7.1 and above systems use the following link to install&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;a href="itms-services://?action=download-manifest&amp;url=https://********/**/tue_test.plist">Install TU/e App For Test&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/a>&lt;/p>
</span><span class='line'>&lt;/body>
</span><span class='line'>&lt;/html></span></code></pre></td></tr></table></div></figure></p>

<p>文件plist:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC &ldquo;-//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;&lt;a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd&lt;/a>&rdquo;>
</span><span class='line'>&lt;plist version="1.0">
</span><span class='line'>&lt;dict>
</span><span class='line'>   &lt;key>items&lt;/key>
</span><span class='line'>   &lt;array>
</span><span class='line'>       &lt;dict>
</span><span class='line'>           &lt;key>assets&lt;/key>
</span><span class='line'>           &lt;array>
</span><span class='line'>               &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>software-package&lt;/string>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>&lt;a href="http://****/**/tue_test.ipa">http://****/**/tue_test.ipa&lt;/a>(ipa文件的访问地址)&lt;/string>
</span><span class='line'>               &lt;/dict>
</span><span class='line'>               &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>display-image&lt;/string>
</span><span class='line'>                   &lt;key>needs-shine&lt;/key>
</span><span class='line'>                   &lt;true/>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>图片的地址&lt;/string>
</span><span class='line'>               &lt;/dict>
</span><span class='line'>      &lt;dict>
</span><span class='line'>                   &lt;key>kind&lt;/key>
</span><span class='line'>                   &lt;string>full-size-image&lt;/string>
</span><span class='line'>                   &lt;key>needs-shine&lt;/key>
</span><span class='line'>                   &lt;true/>
</span><span class='line'>                   &lt;key>url&lt;/key>
</span><span class='line'>                   &lt;string>图片的地址&lt;/string>
</span><span class='line'>              &lt;/dict>
</span><span class='line'>           &lt;/array>
</span><span class='line'>           &lt;key>metadata&lt;/key>
</span><span class='line'>           &lt;dict>
</span><span class='line'>               &lt;key>bundle-identifier&lt;/key>
</span><span class='line'>               &lt;string>com.xx.xx(bundleID需要ipa中需要保持一致)&lt;/string>
</span><span class='line'>               &lt;key>bundle-version&lt;/key>
</span><span class='line'>               &lt;string>1.0(CFBundleVersion需要和ipa中的保持一致)&lt;/string>
</span><span class='line'>               &lt;key>kind&lt;/key>
</span><span class='line'>               &lt;string>software&lt;/string>
</span><span class='line'>               &lt;key>subtitle&lt;/key>
</span><span class='line'>               &lt;string>&lt;/string>
</span><span class='line'>               &lt;key>title&lt;/key>
</span><span class='line'>               &lt;string>TU/e测试版(随便起,用于踊跃alert确认时的提示)&lt;/string>
</span><span class='line'>           &lt;/dict>
</span><span class='line'>       &lt;/dict>
</span><span class='line'>   &lt;/array>
</span><span class='line'>&lt;/dict>
</span><span class='line'>&lt;/plist></span></code></pre></td></tr></table></div></figure></p>

<h3>注意</h3>

<p>在iOS7.1之前,协议地址后的url需要使用http协议,</p>

<blockquote><p>itms-services://?action=download-manifest&amp;url=<a href="http://********/**/tue_test.plist">http://********/**/tue_test.plist</a></p></blockquote>

<p>在iOS7.1以及以后,这里需要换成https协议,</p>

<blockquote><p>itms-services://?action=download-manifest&amp;url=<a href="https://********/**/tue_test.plist">https://********/**/tue_test.plist</a></p></blockquote>

<p>否则使用Safari安装的时候,会提示&#8221;无法安装应用程序，因为“xx.xx.xx” 的证书无效;无法找到主机&#8221;1.2.3.4&#8221;&ldquo;之类的错误.也就是说,原先存放plist的web服务器需要支持https协议.<br/>
自己动手搭建一个https的web服务的话,其中证书的部分很令人头痛的.我在IIS上整了一个上午,最后的结果上自己生成的证书Safari不认.我去,果断放弃这条路,google了一个简便的方法.利用开源中国(<a href="http://git.oschina.net/">http://git.oschina.net/</a>)提供的代码托管服务,托管一下plist文件,然后ipa的安装包和index.html依旧放在自己的服务器上.itms-services协议后面的url地址,改成在plist文件在开源中国上的url(注意url结束到.plist为止,后面的那一串参数不要带,直接手动把http改为https).</p>

<p>具体的流程参见这里,<a href="http://blog.csdn.net/sy_bz/article/details/33739779">http://blog.csdn.net/sy_bz/article/details/33739779</a></p>

<p>同理,我觉得github也应该可以代替开源中国.</p>

<h3>附</h3>

<p>plist中的字段说明:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> key值                </th>
<th style="text-align:left;"> 说明                   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>assets</strong>           </td>
<td style="text-align:left;">   </td>
</tr>
<tr>
<td style="text-align:left;"> software-package url </td>
<td style="text-align:left;"> 要安装的 ipa 地址  </td>
</tr>
<tr>
<td style="text-align:left;"> display-image url    </td>
<td style="text-align:left;">   安装ipa的时候,桌面显示呃图标  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>metadata</strong>         </td>
<td style="text-align:left;">    </td>
</tr>
<tr>
<td style="text-align:left;"> bundle-identifier    </td>
<td style="text-align:left;"> bundle ID (和ipa保持一致) </td>
</tr>
<tr>
<td style="text-align:left;"> bundle-version       </td>
<td style="text-align:left;"> CFBundleVersion(和ipa保持一致)  </td>
</tr>
<tr>
<td style="text-align:left;"> title                </td>
<td style="text-align:left;"> 用户点击时弹框中的AppTitle提示  </td>
</tr>
<tr>
<td style="text-align:left;"> subtitle             </td>
<td style="text-align:left;"> 不明,应该 也跟弹框的内容相关 </td>
</tr>
</tbody>
</table>


<p>以备后用<br/>
自搭https服务器,可以查看的参照:<a href="http://zengrong.net/post/2108.html">http://zengrong.net/post/2108.html</a></p>
]]></content>
  </entry>
  
</feed>

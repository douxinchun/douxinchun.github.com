<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：xcode | 冷雨之家]]></title>
  <link href="http://douxinchun.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://douxinchun.github.io/"/>
  <updated>2018-05-03T09:58:14+08:00</updated>
  <id>http://douxinchun.github.io/</id>
  <author>
    <name><![CDATA[Spring]]></name>
    <email><![CDATA[douxinchunlengyu@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用CocoaLumberjack和XcodeColors实现分级Log和控制台打印彩色日志]]></title>
    <link href="http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi.html"/>
    <updated>2016-07-28T14:42:39+08:00</updated>
    <id>http://douxinchun.github.io/blog/20160728/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-da-yin-cai-se-ri-zhi</id>
    <content type="html"><![CDATA[<p>本文是基于:<a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a> 的改动.</p>

<p>Xcode是一款非常优秀的IDE,但是在日志打印上貌似没有那么多高级的特性，比如分级打印，显示颜色。本博客就介绍下两个开源组件结合使用达到如下效果：
<img src="/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>

<h2>1.CocoaLumberjack</h2>

<h3>1.1基本介绍</h3>

<p>CocoaLumberjack是一个开源工程，为Xcode提供分级打印的策略，源码地址:<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a></p>

<p>CocoaLumberjack包含几个对象分别可以把Log输出到不同的地方:</p>

<ul>
<li>DDASLLogger 输出到Console.app</li>
<li>DDTTYLogger 输出到Xcode控制台</li>
<li>DDLogFileManager 输出到文件</li>
<li>DDAbstractDatabaseLogger 输出到DB</li>
</ul>


<p>通过ddLogLevel的int型变量或常量来定义打印等级</p>

<ul>
<li>LOG_LEVEL_OFF 关闭Log</li>
<li>LOG_LEVEL_ERROR 只打印Error级别的Log</li>
<li>LOG_LEVEL_WARN 打印Error和Warning级别的Log</li>
<li>LOG_LEVEL_INFO 打印Error、Warn、Info级别的Log</li>
<li>LOG_LEVEL_DEBUG 打印Error、Warn、Info、Debug级别的Log</li>
<li>LOG_LEVEL_VERBOSE 打印Error、Warn、Info、Debug、Verbose级别的Log</li>
</ul>


<p>使用不同的宏打印不同级别的Log</p>

<ul>
<li>DDLogError(frmt, …) 打印Error级别的Log</li>
<li>DDLogWarn(frmt, …) 打印Warn级别的Log</li>
<li>DDLogInfo(frmt, …) 打印Info级别的Log</li>
<li>DDLogDebug(frmt, …) 打印Debug级别的Log</li>
<li>DDLogVerbose(frmt, …) 打印Verbose级别的Log</li>
</ul>


<p>如果,现在想往已有的工程中引入CocoaLumberjack,可以使用下面的宏定义,</p>

<pre><code>#define NSLog(...) DDLogInfo(__VA_ARGS__)
</code></pre>

<h3>1.2设置LogFormatter</h3>

<p>我们可以定制自己的Log的方式。通过创建一个类实现DDLogFormatter协议的方法<code>- (NSString *)formatLogMessage:(DDLogMessage *)logMessage;</code>,如下创建一个LogFormatter类，并实现如下方法：</p>

<pre><code>...
NSDateFormatter *threadUnsafeDateFormatter;
threadUnsafeDateFormatter = [[NSDateFormatter alloc] init];
        [threadUnsafeDateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
...  

-(NSString *)formatLogMessage:(DDLogMessage *)logMessage{

    NSString *levelStr = nil;
    NSString *dateAndTime = [threadUnsafeDateFormatter stringFromDate:(logMessage-&gt;_timestamp)];

    switch (logMessage.flag) {
        case DDLogFlagError:
        {
            levelStr=@"[ERROR]";
            break;
        }
        case DDLogFlagWarning:{
            levelStr=@"[WARN ]";
            break;
        }
        case DDLogFlagDebug:{
            levelStr=@"[DEBUG]";
            break;
        }
        case DDLogFlagInfo:
        {
            levelStr=@"[INFO ]";
            break;
        }
        default:
            levelStr=@"[VBOSE]";
            break;
    }

    return [NSString stringWithFormat:@"%@ %@ &gt; %@ [line %d] %@",levelStr,dateAndTime,logMessage.function,logMessage.line,logMessage.message];
}
</code></pre>

<p>上面的例子中我们定制了Log能打印自己的等级、类和方法、代码行数。</p>

<h3>1.3初始化</h3>

<p>CocoaLumberjack的引擎需要我们自己来启动。下面的示例代码</p>

<pre><code> DDFileLogger *filelogger = [[DDFileLogger alloc] init];
    filelogger.rollingFrequency = 60*60*24;//1h滚动一次
    filelogger.logFileManager.maximumNumberOfLogFiles = 24;//最大文件数量24个

    [[DDTTYLogger sharedInstance] setColorsEnabled:YES];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blackColor] backgroundColor:nil forFlag:DDLogFlagVerbose];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor blueColor] backgroundColor:nil forFlag:DDLogFlagDebug];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor purpleColor] backgroundColor:nil forFlag:DDLogFlagInfo];
    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];

    [DDLog addLogger:[DDTTYLogger sharedInstance]];//写入xCode控制台
    [DDLog addLogger:[DDASLLogger sharedInstance]];//写入到苹果的日志
    [DDLog addLogger:filelogger];//写入到文件系统 Cache/Library/Log
    filelogger.logFormatter = [[SHDDLogFormatter alloc] init];
    [DDTTYLogger sharedInstance].logFormatter = [[SHDDLogFormatter alloc] init];

    DDLogError(@"DDLogError 中文错误");      // red
    DDLogWarn(@"DDLogWarn 中文警告");        // orange
    DDLogDebug(@"DDLogDebug 中文调试");      // blue
    DDLogInfo(@"DDLogInfo 中文信息");        // purple
    DDLogVerbose(@"DDLogVerbose 中文详细");  // black
</code></pre>

<h2>2.XcodeColors</h2>

<h3>2.1安装</h3>

<p>XcodeColors是一个Xcode插件，源码地址：<a href="https://github.com/robbiehanson/XcodeColors">XcodeColors</a>; 代码下下来后打开工程run一次，插件就自动安装到了~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/XcodeColors.xcplugin路径下.<br/>
安装完成重启Xcode<br/>
也可以通过Alcatraz来安装,具体的参见<a href="/blog/20150401/xcode-plugin-collection.html">Xcode常用插件集合</a></p>

<h3>2.2配置scheme</h3>

<p>在Scheme中配置Environment Variables, 添加参数XcodeColors为YES.如下图
<img src="/blog_reference_image/2016/7/XcodeColors_scheme.png"></p>

<h3>2.3为DDLog打开颜色</h3>

<pre><code>[[DDTTYLogger sharedInstance] setColorsEnabled:YES];
</code></pre>

<h3>2.4为特定的Log级别设定颜色</h3>

<pre><code>    [[DDTTYLogger sharedInstance] setForegroundColor:[UIColor orangeColor] backgroundColor:nil forFlag:DDLogFlagWarning];
</code></pre>

<p>完成以上步骤就可以看到控制台的不同颜色的打印了。。</p>

<h2>参考文章</h2>

<p><a href="https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/">https://blog.cnbluebox.com/blog/2014/06/06/shi-yong-cocoalumberjackhe-xcodecolorsshi-xian-fen-ji-loghe-kong-zhi-tai-yan-se/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode中的调试器LLDB]]></title>
    <link href="http://douxinchun.github.io/blog/20150720/xcodezhong-de-diao-shi-qi-lldb.html"/>
    <updated>2015-07-20T17:40:46+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150720/xcodezhong-de-diao-shi-qi-lldb</id>
    <content type="html"><![CDATA[<p>原文地址:<a href="http://objccn.io/issue-19-2/">http://objccn.io/issue-19-2/</a><br/>
里面内容很多,本着实用主义,这里只记录我自己常用的命令:</p>

<h3>1.查看某个变量的值</h3>

<p> <em>print</em><br/>
 <img class="<a" src="href="http://img.objccn.io/issue-19/Image_2014-11-20_at_10.09.38_PM.png">http://img.objccn.io/issue-19/Image_2014-11-20_at_10.09.38_PM.png</a>&#8221;><br/>
 LLDB会做前缀匹配,一把简写为p,<br/>
 使用po可以查看NSObject的description</p>

<h3>2.改变某个变量的值</h3>

<p><em>expression</em><br/>
<img class="<a" src="href="http://img.objccn.io/issue-19/Image_2014-11-20_at_10.15.01_PM.png">http://img.objccn.io/issue-19/Image_2014-11-20_at_10.15.01_PM.png</a>&#8221;><br/>
简写为expr或者是e(还能再懒一点吗~~)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode常用的插件集合]]></title>
    <link href="http://douxinchun.github.io/blog/20150401/xcode-plugin-collection.html"/>
    <updated>2015-04-01T10:24:50+08:00</updated>
    <id>http://douxinchun.github.io/blog/20150401/xcode-plugin-collection</id>
    <content type="html"><![CDATA[<p>本文主要总结了一下,我在Xcode下经常使用的的插件.</p>

<h2>1.Alcatraz</h2>

<p>Alcatraz是一个Xcode的开源的包管理工具.使用它,我们可以查找和安装各种各样的插件,模板以及配色方案.<br/>
安装Alcatraz很简单,打开Terminal,把下面一行粘贴进命令行即可,安装之前,友情提示:Alcatraz is available for OSX 10.9+ and Xcode 5+ only.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -fsSL &lt;a href="https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh">https://raw.githubusercontent.com/supermarin/Alcatraz/master/Scripts/install.sh&lt;/a> | sh</span></code></pre></td></tr></table></div></figure><br/>
删除插件命令<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</span></code></pre></td></tr></table></div></figure><br/>
清空Alcatraz缓存的命令<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf ~/Library/Application\ Support/Alcatraz</span></code></pre></td></tr></table></div></figure></p>

<p>安装完成之后 ,最后提示
<code>
Alcatraz successfully installed!!1!🍻   Please restart your Xcode.
</code><br/>
重启Xcode,发现在Windows菜单项下会多出一个Pachage Manager的项,快捷键是⇧⌘9</p>

<!--more-->


<h2>2.VVDocumenter</h2>

<p>VVDocumenter可以帮我们自动生成注释文档,使用的方式也非常简单.在任何的类,方法或者你需要插入注释的地方输入&#8221;///&ldquo;即可,这里引用一张原作者的gif图片来说明效果:<br/>
<img class="<a" src="href="https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966">https://camo.githubusercontent.com/ca5518c9872e15b8a95b9d8c5f44bc331977d710/68747470733a2f2f7261772e6769746875622e636f6d2f6f6e65766361742f5656446f63756d656e7465722d58636f64652f6d61737465722f53637265656e53686f742e676966</a>&#8221;></p>

<p>安装方式也很简单,
1.Alcatraz ,如果你安装了Alcatraz,直接打开Xcode->⇧⌘9->搜索VVDocumenter,Install.<br/>
2.如果不想安装Alcatraz,把整个项目clone到本地,然后在Xcode中编译(⌘B),重启Xcode,Windows->会出现一个VVDocumenter项.安装成功.<br/>
如果还不放心,可以在这查找到插件的存在 ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</p>

<p>GitHub:git@github.com:onevcat/VVDocumenter-Xcode.git</p>

<h2>3.RTImageAssets</h2>

<p>用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 Ctrl+Shift+A 即可自动生成两张低清的补全空位。当然你也可以从 @2x 的图生成 @3x 版本，如果你对图片质量要求不高的话.
附一张使用效果的gif<br/>
<img class="<a" src="href="https://github.com/rickytan/RTImageAssets/raw/master/ScreenCap/usage.gif">https://github.com/rickytan/RTImageAssets/raw/master/ScreenCap/usage.gif</a>&#8221;></p>

<p>GitHub:git@github.com:rickytan/RTImageAssets.git</p>

<h2>4.XAlign</h2>

<p>自动对齐,效果gif图:</p>

<p><img class="<a" src="href="https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966">https://camo.githubusercontent.com/7973c0e352b1f91e3efe5b3550cff5df97f4589a/687474703a2f2f7166692e73682f58416c69676e2f696d616765732f657175616c2e676966</a>&#8221;></p>

<p>安装方式 Terminal,<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># install
</span><span class='line'>    $ curl &lt;a href="http://qfi.sh/XAlign/build/install.sh">http://qfi.sh/XAlign/build/install.sh&lt;/a> | sh&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>or
</span><span class='line'>
</span><span class='line'># update
</span><span class='line'>$ curl http://qfi.sh/XAlign/build/update.sh | sh
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<h2>5.ClangFormat</h2>

<p>代码格式化工具</p>

<p><img class="<a" src="href="https://camo.githubusercontent.com/758d8d2c87f7ec1bb3b6882d6500fe4cf5252759/68747470733a2f2f7261772e6769746875622e636f6d2f7472617669736a6566666572792f436c616e67466f726d61742d58636f64652f6d61737465722f524541444d452f636c616e67666f726d61742d78636f64652d64656d6f2e676966">https://camo.githubusercontent.com/758d8d2c87f7ec1bb3b6882d6500fe4cf5252759/68747470733a2f2f7261772e6769746875622e636f6d2f7472617669736a6566666572792f436c616e67466f726d61742d58636f64652f6d61737465722f524541444d452f636c616e67666f726d61742d78636f64652d64656d6f2e676966</a>&#8221;></p>

<h2>6.Auto Importer for Xcode</h2>

<p>自动引入头文件</p>

<p><img class="<a" src="href="https://github.com/lucholaf/Auto-Importer-for-Xcode/raw/master/demo.gif">https://github.com/lucholaf/Auto-Importer-for-Xcode/raw/master/demo.gif</a>&#8221;></p>

<h2>7.KSImageNamed-Xcode</h2>

<p>图片名称自动补全<br/>
<img class="<a" src="href="https://camo.githubusercontent.com/c354bf04524df86daeabe7a6d2b9926fac790f85/68747470733a2f2f7261772e6769746875622e636f6d2f6b7375746865722f4b53496d6167654e616d65642d58636f64652f6d61737465722f73637265656e73686f742e676966">https://camo.githubusercontent.com/c354bf04524df86daeabe7a6d2b9926fac790f85/68747470733a2f2f7261772e6769746875622e636f6d2f6b7375746865722f4b53496d6167654e616d65642d58636f64652f6d61737465722f73637265656e73686f742e676966</a>&#8221;></p>

<h2>8.ZLGotoSandboxPlugin-Xcode</h2>

<p>快速定位simulator的沙盒路径 <a href="https://github.com/MakeZL/ZLGotoSandboxPlugin">https://github.com/MakeZL/ZLGotoSandboxPlugin</a></p>

<h2>9.XcodeColors</h2>

<p>Debug的时侯使控制台输出的日志带有色彩,一般配合<a href="https://github.com/CocoaLumberjack/CocoaLumberjack">CocoaLumberjack</a>来使用<br/>
<img src="/blog_reference_image/2016/7/xcode_console_colorful_logs.png"></p>
]]></content>
  </entry>
  
</feed>
